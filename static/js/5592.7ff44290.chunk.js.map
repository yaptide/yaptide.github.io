{"version":3,"file":"static/js/5592.7ff44290.chunk.js","mappings":"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","sources":["../node_modules/jsroot/modules/hist/TF1Painter.mjs","../node_modules/jsroot/modules/hist/TF3Painter.mjs"],"sourcesContent":["import { settings, gStyle, isStr, isFunc, clTH1D, createHistogram, setHistogramTitle, clTF1, kNoStats } from '../core.mjs';\nimport { floatToString } from '../base/BasePainter.mjs';\nimport { getElementMainPainter, ObjectPainter } from '../base/ObjectPainter.mjs';\nimport { THistPainter } from '../hist2d/THistPainter.mjs';\nimport { TH1Painter } from '../hist2d/TH1Painter.mjs';\nimport { proivdeEvalPar, _getTF1Save } from '../base/func.mjs';\n\n\n/** @summary Create log scale for axis bins\n  * @private */\nfunction produceTAxisLogScale(axis, num, min, max) {\n   let lmin, lmax;\n\n   if (max > 0) {\n      lmax = Math.log(max);\n      lmin = min > 0 ? Math.log(min) : lmax - 5;\n   } else {\n      lmax = -10;\n      lmin = -15;\n   }\n\n   axis.fNbins = num;\n   axis.fXbins = new Array(num + 1);\n   for (let i = 0; i <= num; ++i)\n      axis.fXbins[i] = Math.exp(lmin + i / num * (lmax - lmin));\n   axis.fXmin = Math.exp(lmin);\n   axis.fXmax = Math.exp(lmax);\n}\n\nfunction scanTF1Options(opt) {\n   if (!isStr(opt)) opt = '';\n   let p = opt.indexOf(';webcanv_hist'), webcanv_hist = false, use_saved = 0;\n   if (p >= 0) {\n      webcanv_hist = true;\n      opt = opt.slice(0, p);\n   }\n   p = opt.indexOf(';force_saved');\n   if (p >= 0) {\n      use_saved = 2;\n      opt = opt.slice(0, p);\n   }\n   p = opt.indexOf(';prefer_saved');\n   if (p >= 0) {\n      use_saved = 1;\n      opt = opt.slice(0, p);\n   }\n   return { opt, webcanv_hist, use_saved };\n}\n\n\n/**\n  * @summary Painter for TF1 object\n  *\n  * @private\n  */\n\nclass TF1Painter extends TH1Painter {\n\n   /** @summary Returns drawn object name */\n   getObjectName() { return this.$func?.fName ?? 'func'; }\n\n   /** @summary Returns drawn object class name */\n   getClassName() { return this.$func?._typename ?? clTF1; }\n\n   /** @summary Returns true while function is drawn */\n   isTF1() { return true; }\n\n   /** @summary Returns primary function which was then drawn as histogram */\n   getPrimaryObject() { return this.$func; }\n\n   /** @summary Update function */\n   updateObject(obj /*, opt */) {\n      if (!obj || (this.getClassName() !== obj._typename)) return false;\n      delete obj.evalPar;\n      const histo = this.getHisto();\n\n      if (this.webcanv_hist) {\n         const h0 = this.getPadPainter()?.findInPrimitives('Func', clTH1D);\n         if (h0) this.updateAxes(histo, h0, this.getFramePainter());\n      }\n\n      this.$func = obj;\n      this.createTF1Histogram(obj, histo);\n      this.scanContent();\n      return true;\n   }\n\n   /** @summary Redraw TF1\n     * @private */\n   redraw(reason) {\n      if (!this._use_saved_points && (reason === 'logx' || reason === 'zoom')) {\n         this.createTF1Histogram(this.$func, this.getHisto());\n         this.scanContent();\n      }\n\n      return super.redraw(reason);\n   }\n\n   /** @summary Create histogram for TF1 drawing\n     * @private */\n   createTF1Histogram(tf1, hist) {\n      const fp = this.getFramePainter(),\n            pad = this.getPadPainter()?.getRootPad(true),\n            logx = pad?.fLogx,\n            gr = fp?.getGrFuncs(this.second_x, this.second_y);\n      let xmin = tf1.fXmin, xmax = tf1.fXmax, np = Math.max(tf1.fNpx, 100);\n\n      if (gr?.zoom_xmin !== gr?.zoom_xmax) {\n         const dx = (xmax - xmin) / np;\n         if ((xmin < gr.zoom_xmin) && (gr.zoom_xmin < xmax))\n            xmin = Math.max(xmin, gr.zoom_xmin - dx);\n         if ((xmin < gr.zoom_xmax) && (gr.zoom_xmax < xmax))\n            xmax = Math.min(xmax, gr.zoom_xmax + dx);\n      }\n\n      this._use_saved_points = (tf1.fSave.length > 3) && (settings.PreferSavedPoints || (this.use_saved > 1));\n\n      const ensureBins = num => {\n         if (hist.fNcells !== num + 2) {\n            hist.fNcells = num + 2;\n            hist.fArray = new Float32Array(hist.fNcells);\n         }\n         hist.fArray.fill(0);\n         hist.fXaxis.fNbins = num;\n         hist.fXaxis.fXbins = [];\n      };\n\n      delete this._fail_eval;\n\n      // this._use_saved_points = true;\n\n      if (!this._use_saved_points) {\n         let iserror = false;\n\n         if (!tf1.evalPar) {\n            try {\n               if (!proivdeEvalPar(tf1))\n                  iserror = true;\n            } catch {\n               iserror = true;\n            }\n         }\n\n         ensureBins(np);\n\n         if (logx)\n            produceTAxisLogScale(hist.fXaxis, np, xmin, xmax);\n          else {\n            hist.fXaxis.fXmin = xmin;\n            hist.fXaxis.fXmax = xmax;\n         }\n\n         for (let n = 0; (n < np) && !iserror; n++) {\n            const x = hist.fXaxis.GetBinCenter(n + 1);\n            let y = 0;\n            try {\n               y = tf1.evalPar(x);\n            } catch (err) {\n               iserror = true;\n            }\n\n            if (!iserror)\n               hist.setBinContent(n + 1, Number.isFinite(y) ? y : 0);\n         }\n\n         if (iserror)\n            this._fail_eval = true;\n\n         if (iserror && (tf1.fSave.length > 3))\n            this._use_saved_points = true;\n      }\n\n      // in the case there were points have saved and we cannot calculate function\n      // if we don't have the user's function\n      if (this._use_saved_points) {\n         np = tf1.fSave.length - 3;\n         let custom_xaxis = null;\n         xmin = tf1.fSave[np + 1];\n         xmax = tf1.fSave[np + 2];\n\n         if (xmin === xmax) {\n            // xmin = tf1.fSave[np];\n            const mp = this.getMainPainter();\n            if (isFunc(mp?.getHisto))\n               custom_xaxis = mp?.getHisto()?.fXaxis;\n         }\n\n         if (custom_xaxis) {\n            ensureBins(hist.fXaxis.fNbins);\n            Object.assign(hist.fXaxis, custom_xaxis);\n            // TODO: find first bin\n\n            for (let n = 0; n < np; ++n) {\n               const y = tf1.fSave[n];\n               hist.setBinContent(n + 1, Number.isFinite(y) ? y : 0);\n            }\n         } else {\n            ensureBins(tf1.fNpx);\n            hist.fXaxis.fXmin = tf1.fXmin;\n            hist.fXaxis.fXmax = tf1.fXmax;\n\n            for (let n = 0; n < tf1.fNpx; ++n) {\n               const y = _getTF1Save(tf1, hist.fXaxis.GetBinCenter(n + 1));\n               hist.setBinContent(n + 1, Number.isFinite(y) ? y : 0);\n            }\n         }\n      }\n\n      hist.fName = 'Func';\n      setHistogramTitle(hist, tf1.fTitle);\n      hist.fMinimum = tf1.fMinimum;\n      hist.fMaximum = tf1.fMaximum;\n      hist.fLineColor = tf1.fLineColor;\n      hist.fLineStyle = tf1.fLineStyle;\n      hist.fLineWidth = tf1.fLineWidth;\n      hist.fFillColor = tf1.fFillColor;\n      hist.fFillStyle = tf1.fFillStyle;\n      hist.fMarkerColor = tf1.fMarkerColor;\n      hist.fMarkerStyle = tf1.fMarkerStyle;\n      hist.fMarkerSize = tf1.fMarkerSize;\n      hist.fBits |= kNoStats;\n   }\n\n   /** @summary Extract function ranges */\n   extractAxesProperties(ndim) {\n      super.extractAxesProperties(ndim);\n\n      const func = this.$func, nsave = func?.fSave.length ?? 0;\n\n      if (nsave > 3 && this._use_saved_points) {\n         this.xmin = Math.min(this.xmin, func.fSave[nsave - 2]);\n         this.xmax = Math.max(this.xmax, func.fSave[nsave - 1]);\n      }\n      if (func) {\n         this.xmin = Math.min(this.xmin, func.fXmin);\n         this.xmax = Math.max(this.xmax, func.fXmax);\n      }\n   }\n\n   /** @summary Checks if it makes sense to zoom inside specified axis range */\n   canZoomInside(axis, min, max) {\n      const nsave = this.$func?.fSave.length ?? 0;\n      if ((nsave > 3) && this._use_saved_points && (axis === 'x')) {\n         // in the case where the points have been saved, useful for example\n         // if we don't have the user's function\n         const nb_points = nsave - 2,\n             xmin = this.$func.fSave[nsave - 2],\n             xmax = this.$func.fSave[nsave - 1];\n\n         return Math.abs(xmax - xmin) / nb_points < Math.abs(max - min);\n      }\n\n      // if function calculated, one always could zoom inside\n      return (axis === 'x') || (axis === 'y');\n   }\n\n      /** @summary retrurn tooltips for TF2 */\n   getTF1Tooltips(pnt) {\n      delete this.$tmp_tooltip;\n      const lines = [this.getObjectHint()],\n            funcs = this.getFramePainter()?.getGrFuncs(this.options.second_x, this.options.second_y);\n\n      if (!funcs || !isFunc(this.$func?.evalPar)) {\n         lines.push('grx = ' + pnt.x, 'gry = ' + pnt.y);\n         return lines;\n      }\n\n      const x = funcs.revertAxis('x', pnt.x);\n      let y = 0, gry = 0, iserror = false;\n\n       try {\n          y = this.$func.evalPar(x);\n          gry = Math.round(funcs.gry(y));\n       } catch {\n          iserror = true;\n       }\n\n      lines.push('x = ' + funcs.axisAsText('x', x),\n                 'value = ' + (iserror ? '<fail>' : floatToString(y, gStyle.fStatFormat)));\n\n      if (!iserror)\n         this.$tmp_tooltip = { y, gry };\n      return lines;\n   }\n\n   /** @summary process tooltip event for TF1 object */\n   processTooltipEvent(pnt) {\n      if (this._use_saved_points)\n         return super.processTooltipEvent(pnt);\n\n      let ttrect = this.draw_g?.selectChild('.tooltip_bin');\n\n      if (!this.draw_g || !pnt) {\n         ttrect?.remove();\n         return null;\n      }\n\n      const res = { name: this.$func?.fName, title: this.$func?.fTitle,\n                    x: pnt.x, y: pnt.y,\n                    color1: this.lineatt?.color ?? 'green',\n                    color2: this.fillatt?.getFillColorAlt('blue') ?? 'blue',\n                    lines: this.getTF1Tooltips(pnt), exact: true, menu: true };\n\n      if (pnt.disabled)\n         ttrect.remove();\n      else {\n         if (ttrect.empty()) {\n            ttrect = this.draw_g.append('svg:circle')\n                             .attr('class', 'tooltip_bin')\n                             .style('pointer-events', 'none')\n                             .style('fill', 'none')\n                             .attr('r', (this.lineatt?.width ?? 1) + 4);\n         }\n\n         ttrect.attr('cx', pnt.x)\n               .attr('cy', this.$tmp_tooltip.gry ?? pnt.y)\n               .call(this.lineatt?.func);\n      }\n\n      return res;\n   }\n\n   /** @summary fill information for TWebCanvas\n    * @desc Used to inform webcanvas when evaluation failed\n     * @private */\n   fillWebObjectOptions(opt) {\n      opt.fcust = this._fail_eval && !this.use_saved ? 'func_fail' : '';\n   }\n\n   /** @summary draw TF1 object */\n   static async draw(dom, tf1, opt) {\n      const web = scanTF1Options(opt);\n      opt = web.opt;\n      delete web.opt;\n      let hist;\n\n      if (web.webcanv_hist) {\n         const dummy = new ObjectPainter(dom);\n         hist = dummy.getPadPainter()?.findInPrimitives('Func', clTH1D);\n      }\n\n      if (!hist) {\n         hist = createHistogram(clTH1D, 100);\n         hist.fBits |= kNoStats;\n      }\n\n      if (!opt && getElementMainPainter(dom))\n         opt = 'same';\n\n      const painter = new TF1Painter(dom, hist);\n\n      painter.$func = tf1;\n      Object.assign(painter, web);\n\n      painter.createTF1Histogram(tf1, hist);\n\n      return THistPainter._drawHist(painter, opt);\n   }\n\n} // class TF1Painter\n\nexport { TF1Painter, produceTAxisLogScale, scanTF1Options };\n","import { createHistogram, setHistogramTitle, kNoStats, settings, clTF3, clTH2F } from '../core.mjs';\nimport { TH2Painter } from '../hist/TH2Painter.mjs';\nimport { proivdeEvalPar } from '../base/func.mjs';\nimport { produceTAxisLogScale, scanTF1Options } from '../hist/TF1Painter.mjs';\nimport { ObjectPainter, getElementMainPainter } from '../base/ObjectPainter.mjs';\nimport { DrawOptions } from '../base/BasePainter.mjs';\nimport { THistPainter } from '../hist2d/THistPainter.mjs';\n\n\nfunction findZValue(arrz, arrv, cross = 0) {\n   for (let i = arrz.length - 2; i >= 0; --i) {\n      const v1 = arrv[i], v2 = arrv[i + 1],\n            z1 = arrz[i], z2 = arrz[i + 1];\n      if (v1 === cross) return z1;\n      if (v2 === cross) return z2;\n      if ((v1 < cross) !== (v2 < cross))\n         return z1 + (cross - v1) / (v2 - v1) * (z2 - z1);\n   }\n\n   return arrz[0] - 1;\n}\n\n\n/**\n  * @summary Painter for TF3 object\n  *\n  * @private\n  */\n\nclass TF3Painter extends TH2Painter {\n\n   /** @summary Returns drawn object name */\n   getObjectName() { return this.$func?.fName ?? 'func'; }\n\n   /** @summary Returns drawn object class name */\n   getClassName() { return this.$func?._typename ?? clTF3; }\n\n   /** @summary Returns true while function is drawn */\n   isTF1() { return true; }\n\n   /** @summary Returns primary function which was then drawn as histogram */\n   getPrimaryObject() { return this.$func; }\n\n   /** @summary Update histogram */\n   updateObject(obj /*, opt */) {\n      if (!obj || (this.getClassName() !== obj._typename)) return false;\n      delete obj.evalPar;\n      const histo = this.getHisto();\n\n      if (this.webcanv_hist) {\n         const h0 = this.getPadPainter()?.findInPrimitives('Func', clTH2F);\n         if (h0) this.updateAxes(histo, h0, this.getFramePainter());\n      }\n\n      this.$func = obj;\n      this.createTF3Histogram(obj, histo);\n      this.scanContent();\n      return true;\n   }\n\n   /** @summary Redraw TF2\n     * @private */\n   redraw(reason) {\n      if (!this._use_saved_points && (reason === 'logx' || reason === 'logy' || reason === 'logy' || reason === 'zoom')) {\n         this.createTF3Histogram(this.$func, this.getHisto());\n         this.scanContent();\n      }\n\n      return super.redraw(reason);\n   }\n\n   /** @summary Create histogram for TF3 drawing\n     * @private */\n   createTF3Histogram(func, hist) {\n      const nsave = func.fSave.length - 9;\n\n      this._use_saved_points = (nsave > 0) && (settings.PreferSavedPoints || (this.use_saved > 1));\n\n      const fp = this.getFramePainter(),\n            pad = this.getPadPainter()?.getRootPad(true),\n            logx = pad?.fLogx, logy = pad?.fLogy,\n            gr = fp?.getGrFuncs(this.second_x, this.second_y);\n      let xmin = func.fXmin, xmax = func.fXmax,\n          ymin = func.fYmin, ymax = func.fYmax,\n          zmin = func.fZmin, zmax = func.fZmax,\n          npx = Math.max(func.fNpx, 20),\n          npy = Math.max(func.fNpy, 20),\n          npz = Math.max(func.fNpz, 20);\n\n      if (gr?.zoom_xmin !== gr?.zoom_xmax) {\n         const dx = (xmax - xmin) / npx;\n         if ((xmin < gr.zoom_xmin) && (gr.zoom_xmin < xmax))\n            xmin = Math.max(xmin, gr.zoom_xmin - dx);\n         if ((xmin < gr.zoom_xmax) && (gr.zoom_xmax < xmax))\n            xmax = Math.min(xmax, gr.zoom_xmax + dx);\n      }\n\n      if (gr?.zoom_ymin !== gr?.zoom_ymax) {\n         const dy = (ymax - ymin) / npy;\n         if ((ymin < gr.zoom_ymin) && (gr.zoom_ymin < ymax))\n            ymin = Math.max(ymin, gr.zoom_ymin - dy);\n         if ((ymin < gr.zoom_ymax) && (gr.zoom_ymax < ymax))\n            ymax = Math.min(ymax, gr.zoom_ymax + dy);\n      }\n\n      if (gr?.zoom_zmin !== gr?.zoom_zmax) {\n         // no need for dz here - TH2 is not binned over Z axis\n         if ((zmin < gr.zoom_zmin) && (gr.zoom_zmin < zmax))\n            zmin = gr.zoom_zmin;\n         if ((zmin < gr.zoom_zmax) && (gr.zoom_zmax < zmax))\n            zmax = gr.zoom_zmax;\n      }\n\n      const ensureBins = (nx, ny) => {\n         if (hist.fNcells !== (nx + 2) * (ny + 2)) {\n            hist.fNcells = (nx + 2) * (ny + 2);\n            hist.fArray = new Float32Array(hist.fNcells);\n         }\n         hist.fArray.fill(0);\n         hist.fXaxis.fNbins = nx;\n         hist.fXaxis.fXbins = [];\n         hist.fYaxis.fNbins = ny;\n         hist.fYaxis.fXbins = [];\n         hist.fXaxis.fXmin = xmin;\n         hist.fXaxis.fXmax = xmax;\n         hist.fYaxis.fXmin = ymin;\n         hist.fYaxis.fXmax = ymax;\n         hist.fMinimum = zmin;\n         hist.fMaximum = zmax;\n      };\n\n      delete this._fail_eval;\n\n      if (!this._use_saved_points) {\n         let iserror = false;\n\n         if (!func.evalPar && !proivdeEvalPar(func))\n            iserror = true;\n\n         ensureBins(npx, npy);\n\n         if (logx)\n            produceTAxisLogScale(hist.fXaxis, npx, xmin, xmax);\n         if (logy)\n            produceTAxisLogScale(hist.fYaxis, npy, ymin, ymax);\n\n         const arrv = new Array(npz), arrz = new Array(npz);\n         for (let k = 0; k < npz; ++k)\n            arrz[k] = zmin + k / (npz - 1) * (zmax - zmin);\n\n         for (let j = 0; (j < npy) && !iserror; ++j) {\n            for (let i = 0; (i < npx) && !iserror; ++i) {\n               const x = hist.fXaxis.GetBinCenter(i+1),\n                     y = hist.fYaxis.GetBinCenter(j+1);\n               let z = 0;\n\n               try {\n                  for (let k = 0; k < npz; ++k)\n                     arrv[k] = func.evalPar(x, y, arrz[k]);\n\n                  z = findZValue(arrz, arrv);\n               } catch {\n                  iserror = true;\n               }\n\n               if (!iserror)\n                  hist.setBinContent(hist.getBin(i + 1, j + 1), Number.isFinite(z) ? z : 0);\n            }\n         }\n\n         if (iserror)\n            this._fail_eval = true;\n\n         if (iserror && (nsave > 0))\n            this._use_saved_points = true;\n      }\n\n      if (this._use_saved_points) {\n         xmin = func.fSave[nsave]; xmax = func.fSave[nsave+1];\n         ymin = func.fSave[nsave+2]; ymax = func.fSave[nsave+3];\n         zmin = func.fSave[nsave+4]; zmax = func.fSave[nsave+5];\n         npx = Math.round(func.fSave[nsave+6]);\n         npy = Math.round(func.fSave[nsave+7]);\n         npz = Math.round(func.fSave[nsave+8]);\n         // dx = (xmax - xmin) / npx,\n         // dy = (ymax - ymin) / npy,\n         const dz = (zmax - zmin) / npz;\n\n         ensureBins(npx + 1, npy + 1);\n\n         const arrv = new Array(npz + 1), arrz = new Array(npz + 1);\n         for (let k = 0; k <= npz; k++)\n            arrz[k] = zmin + k*dz;\n\n         for (let i = 0; i <= npx; ++i) {\n            for (let j = 0; j <= npy; ++j) {\n               for (let k = 0; k <= npz; k++)\n                  arrv[k] = func.fSave[i + (npx + 1)*(j + (npy + 1)*k)];\n               const z = findZValue(arrz, arrv);\n               hist.setBinContent(hist.getBin(i + 1, j + 1), Number.isFinite(z) ? z : 0);\n            }\n         }\n      }\n\n      hist.fName = 'Func';\n      setHistogramTitle(hist, func.fTitle);\n\n\n      // hist.fMinimum = func.fMinimum;\n      // hist.fMaximum = func.fMaximum;\n      // fHistogram->SetContour(fContour.fN, levels);\n      hist.fLineColor = func.fLineColor;\n      hist.fLineStyle = func.fLineStyle;\n      hist.fLineWidth = func.fLineWidth;\n      hist.fFillColor = func.fFillColor;\n      hist.fFillStyle = func.fFillStyle;\n      hist.fMarkerColor = func.fMarkerColor;\n      hist.fMarkerStyle = func.fMarkerStyle;\n      hist.fMarkerSize = func.fMarkerSize;\n      hist.fBits |= kNoStats;\n\n      return hist;\n   }\n\n   /** @summary Extract function ranges */\n   extractAxesProperties(ndim) {\n      super.extractAxesProperties(ndim);\n\n      const func = this.$func, nsave = func?.fSave.length ?? 0;\n\n      if (nsave > 9 && this._use_saved_points) {\n         this.xmin = Math.min(this.xmin, func.fSave[nsave-9]);\n         this.xmax = Math.max(this.xmax, func.fSave[nsave-8]);\n         this.ymin = Math.min(this.ymin, func.fSave[nsave-7]);\n         this.ymax = Math.max(this.ymax, func.fSave[nsave-6]);\n         this.zmin = Math.min(this.zmin, func.fSave[nsave-5]);\n         this.zmax = Math.max(this.zmax, func.fSave[nsave-4]);\n      }\n      if (func) {\n         this.xmin = Math.min(this.xmin, func.fXmin);\n         this.xmax = Math.max(this.xmax, func.fXmax);\n         this.ymin = Math.min(this.ymin, func.fYmin);\n         this.ymax = Math.max(this.ymax, func.fYmax);\n         this.zmin = Math.min(this.zmin, func.fZmin);\n         this.zmax = Math.max(this.zmax, func.fZmax);\n      }\n   }\n\n   /** @summary fill information for TWebCanvas\n    * @desc Used to inform webcanvas when evaluation failed\n     * @private */\n   fillWebObjectOptions(opt) {\n      opt.fcust = this._fail_eval && !this.use_saved ? 'func_fail' : '';\n   }\n\n   /** @summary draw TF3 object */\n   static async draw(dom, tf3, opt) {\n      const web = scanTF1Options(opt);\n      opt = web.opt;\n      delete web.opt;\n\n      const d = new DrawOptions(opt);\n      if (d.empty() || (opt === 'gl'))\n         opt = 'surf1';\n      else if (d.opt === 'SAME')\n         opt = 'surf1 same';\n\n      if ((opt.indexOf('same') === 0) || (opt.indexOf('SAME') === 0)) {\n         if (!getElementMainPainter(dom))\n            opt = 'A_ADJUST_FRAME_' + opt.slice(4);\n      }\n\n      let hist;\n\n      if (web.webcanv_hist) {\n         const dummy = new ObjectPainter(dom);\n         hist = dummy.getPadPainter()?.findInPrimitives('Func', clTH2F);\n      }\n\n      if (!hist) {\n         hist = createHistogram(clTH2F, 20, 20);\n         hist.fBits |= kNoStats;\n      }\n\n      const painter = new TF3Painter(dom, hist);\n\n      painter.$func = tf3;\n      Object.assign(painter, web);\n      painter.createTF3Histogram(tf3, hist);\n      return THistPainter._drawHist(painter, opt);\n   }\n\n} // class TF3Painter\n\nexport { TF3Painter };\n"],"names":["produceTAxisLogScale","axis","num","min","max","lmin","lmax","Math","log","fNbins","fXbins","Array","i","exp","fXmin","fXmax","scanTF1Options","opt","isStr","p","indexOf","webcanv_hist","use_saved","slice","TF1Painter","TH1Painter","getObjectName","this","$func","fName","getClassName","_typename","clTF1","isTF1","getPrimaryObject","updateObject","obj","evalPar","histo","getHisto","h0","getPadPainter","findInPrimitives","clTH1D","updateAxes","getFramePainter","createTF1Histogram","scanContent","redraw","reason","_use_saved_points","super","tf1","hist","fp","pad","getRootPad","logx","fLogx","gr","getGrFuncs","second_x","second_y","xmin","xmax","np","fNpx","zoom_xmin","zoom_xmax","dx","fSave","length","settings","PreferSavedPoints","ensureBins","fNcells","fArray","Float32Array","fill","fXaxis","_fail_eval","iserror","proivdeEvalPar","n","x","GetBinCenter","y","err","setBinContent","Number","isFinite","custom_xaxis","mp","getMainPainter","isFunc","Object","assign","_getTF1Save","setHistogramTitle","fTitle","fMinimum","fMaximum","fLineColor","fLineStyle","fLineWidth","fFillColor","fFillStyle","fMarkerColor","fMarkerStyle","fMarkerSize","fBits","kNoStats","extractAxesProperties","ndim","func","nsave","canZoomInside","nb_points","abs","getTF1Tooltips","pnt","$tmp_tooltip","lines","getObjectHint","funcs","options","push","revertAxis","gry","round","axisAsText","floatToString","gStyle","fStatFormat","processTooltipEvent","ttrect","draw_g","selectChild","remove","res","name","title","color1","lineatt","color","color2","fillatt","getFillColorAlt","exact","menu","disabled","empty","append","attr","style","width","call","fillWebObjectOptions","fcust","draw","dom","web","dummy","ObjectPainter","createHistogram","getElementMainPainter","painter","THistPainter","_drawHist","findZValue","arrz","arrv","cross","arguments","undefined","v1","v2","z1","z2","TF3Painter","TH2Painter","clTF3","clTH2F","createTF3Histogram","logy","fLogy","ymin","fYmin","ymax","fYmax","zmin","fZmin","zmax","fZmax","npx","npy","fNpy","npz","fNpz","zoom_ymin","zoom_ymax","dy","zoom_zmin","zoom_zmax","nx","ny","fYaxis","k","j","z","getBin","dz","tf3","d","DrawOptions"],"sourceRoot":""}
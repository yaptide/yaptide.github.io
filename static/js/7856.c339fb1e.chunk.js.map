{"version":3,"file":"static/js/7856.c339fb1e.chunk.js","mappings":"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","sources":["../node_modules/jsroot/modules/draw/TPolyMarker3D.mjs","../node_modules/jsroot/modules/draw/TTree.mjs","../node_modules/jsroot/modules/hist/TGraphPainter.mjs"],"sourcesContent":["import { settings, isObject } from '../core.mjs';\nimport { PointsCreator } from '../base/base3d.mjs';\n\n/** @summary direct draw function for TPolyMarker3D object\n  * @private */\nasync function drawPolyMarker3D() {\n   const fp = this.$fp || this.getFramePainter();\n\n   delete this.$fp;\n\n   if (!isObject(fp) || !fp.grx || !fp.gry || !fp.grz)\n      return this;\n\n   const poly = this.getObject(), sizelimit = 50000, fP = poly.fP;\n   let step = 1, numselect = 0;\n\n   for (let i = 0; i < fP.length; i += 3) {\n      if ((fP[i] < fp.scale_xmin) || (fP[i] > fp.scale_xmax) ||\n          (fP[i+1] < fp.scale_ymin) || (fP[i+1] > fp.scale_ymax) ||\n          (fP[i+2] < fp.scale_zmin) || (fP[i+2] > fp.scale_zmax)) continue;\n      ++numselect;\n   }\n\n   if ((settings.OptimizeDraw > 0) && (numselect > sizelimit)) {\n      step = Math.floor(numselect/sizelimit);\n      if (step <= 2) step = 2;\n   }\n\n   const size = Math.floor(numselect/step),\n         pnts = new PointsCreator(size, fp.webgl, fp.size_x3d/100),\n         index = new Int32Array(size);\n   let select = 0, icnt = 0;\n\n   for (let i = 0; i < fP.length; i += 3) {\n      if ((fP[i] < fp.scale_xmin) || (fP[i] > fp.scale_xmax) ||\n          (fP[i+1] < fp.scale_ymin) || (fP[i+1] > fp.scale_ymax) ||\n          (fP[i+2] < fp.scale_zmin) || (fP[i+2] > fp.scale_zmax)) continue;\n\n      if (step > 1) {\n         select = (select+1) % step;\n         if (select !== 0) continue;\n      }\n\n      index[icnt++] = i;\n\n      pnts.addPoint(fp.grx(fP[i]), fp.gry(fP[i+1]), fp.grz(fP[i+2]));\n   }\n\n   return pnts.createPoints({ color: this.getColor(poly.fMarkerColor), style: poly.fMarkerStyle }).then(mesh => {\n      mesh.tip_color = (poly.fMarkerColor === 3) ? 0xFF0000 : 0x00FF00;\n      mesh.tip_name = poly.fName || 'Poly3D';\n      mesh.poly = poly;\n      mesh.fp = fp;\n      mesh.scale0 = 0.7*pnts.scale;\n      mesh.index = index;\n\n      fp.add3DMesh(mesh, this, true);\n\n      mesh.tooltip = function(intersect) {\n         let indx = Math.floor(intersect.index / this.nvertex);\n         if ((indx < 0) || (indx >= this.index.length)) return null;\n\n         indx = this.index[indx];\n\n         const fp = this.fp,\n               grx = fp.grx(this.poly.fP[indx]),\n               gry = fp.gry(this.poly.fP[indx+1]),\n               grz = fp.grz(this.poly.fP[indx+2]);\n\n         return {\n            x1: grx - this.scale0,\n            x2: grx + this.scale0,\n            y1: gry - this.scale0,\n            y2: gry + this.scale0,\n            z1: grz - this.scale0,\n            z2: grz + this.scale0,\n            color: this.tip_color,\n            lines: [this.tip_name,\n                     'pnt: ' + indx/3,\n                     'x: ' + fp.axisAsText('x', this.poly.fP[indx]),\n                     'y: ' + fp.axisAsText('y', this.poly.fP[indx+1]),\n                     'z: ' + fp.axisAsText('z', this.poly.fP[indx+2])\n                   ]\n         };\n      };\n\n      fp.render3D(100); // set timeout to be able draw other points\n\n      return this;\n   });\n}\n\nexport { drawPolyMarker3D };\n","import { internals, httpRequest, isBatchMode, isFunc, isStr, create, toJSON,\n         prROOT, clTObjString, clTGraph, clTPolyMarker3D, clTH1, clTH2, clTH3 } from '../core.mjs';\nimport { select as d3_select } from '../d3.mjs';\nimport { kTString, kObject, kAnyP } from '../io.mjs';\nimport { kClonesNode, kSTLNode, clTBranchFunc, treeDraw, treeIOTest, TDrawSelector } from '../tree.mjs';\nimport { BasePainter } from '../base/BasePainter.mjs';\nimport { cleanup, resize, drawRawText, ObjectPainter } from '../base/ObjectPainter.mjs';\nimport { TH1Painter } from '../hist/TH1Painter.mjs';\nimport { TH2Painter } from '../hist/TH2Painter.mjs';\nimport { TH3Painter } from '../hist/TH3Painter.mjs';\nimport { TGraphPainter } from '../hist/TGraphPainter.mjs';\nimport { drawPolyMarker3D } from '../draw/TPolyMarker3D.mjs';\nimport { showProgress, registerForResize } from '../gui/utils.mjs';\n\n\n/** @summary Show TTree::Draw progress during processing\n  * @private */\nTDrawSelector.prototype.ShowProgress = function(value) {\n   let msg, ret;\n   if ((value === undefined) || !Number.isFinite(value))\n      msg = ret = '';\n   else if (this._break) {\n      msg = 'Breaking ... ';\n      ret = 'break';\n   } else {\n      if (this.last_progress !== value) {\n         const diff = value - this.last_progress;\n         if (!this.aver_diff) this.aver_diff = diff;\n         this.aver_diff = diff * 0.3 + this.aver_diff * 0.7;\n      }\n\n      this.last_progress = value;\n\n      let ndig = 0;\n      if (this.aver_diff <= 0)\n         ndig = 0;\n      else if (this.aver_diff < 0.0001)\n         ndig = 3;\n      else if (this.aver_diff < 0.001)\n         ndig = 2;\n      else if (this.aver_diff < 0.01)\n         ndig = 1;\n      msg = `TTree draw ${(value * 100).toFixed(ndig)} % `;\n   }\n\n   showProgress(msg, 0, () => { this._break = 1; });\n   return ret;\n};\n\n/** @summary Draw result of tree drawing\n  * @private */\nasync function drawTreeDrawResult(dom, obj, opt) {\n   const typ = obj?._typename;\n\n   if (!typ || !isStr(typ))\n      return Promise.reject(Error('Object without type cannot be draw with TTree'));\n\n   if (typ.indexOf(clTH1) === 0)\n      return TH1Painter.draw(dom, obj, opt);\n   if (typ.indexOf(clTH2) === 0)\n      return TH2Painter.draw(dom, obj, opt);\n   if (typ.indexOf(clTH3) === 0)\n      return TH3Painter.draw(dom, obj, opt);\n   if (typ.indexOf(clTGraph) === 0)\n      return TGraphPainter.draw(dom, obj, opt);\n   if ((typ === clTPolyMarker3D) && obj.$hist) {\n      return TH3Painter.draw(dom, obj.$hist, opt).then(() => {\n         const p2 = new ObjectPainter(dom, obj, opt);\n         p2.addToPadPrimitives();\n         p2.redraw = drawPolyMarker3D;\n         return p2.redraw();\n      });\n   }\n\n   return Promise.reject(Error(`Object of type ${typ} cannot be draw with TTree`));\n}\n\n\n/** @summary Handle callback function with progress of tree draw\n  * @private */\nasync function treeDrawProgress(obj, final) {\n   // no need to update drawing if previous is not yet completed\n   if (!final && !this.last_pr)\n      return;\n\n   if (this.dump || this.testio) {\n      if (!final) return;\n      if (isBatchMode()) {\n         const painter = new BasePainter(this.drawid);\n         painter.selectDom().property('_json_object_', obj);\n         return painter;\n      }\n      if (isFunc(internals.drawInspector))\n         return internals.drawInspector(this.drawid, obj);\n      const str = create(clTObjString);\n      str.fString = toJSON(obj, 2);\n      return drawRawText(this.drawid, str);\n   }\n\n   // complex logic with intermediate update\n   // while TTree reading not synchronized with drawing,\n   // next portion can appear before previous is drawn\n   // critical is last drawing which should wait for previous one\n   // therefore last_pr is kept as inidication that promise is not yet processed\n\n   if (!this.last_pr) this.last_pr = Promise.resolve(true);\n\n   return this.last_pr.then(() => {\n      if (this.obj_painter)\n         this.last_pr = this.obj_painter.redrawObject(obj).then(() => this.obj_painter);\n      else if (!obj) {\n         if (final) console.log('no result after tree drawing');\n         this.last_pr = false; // return false indicating no drawing is done\n      } else {\n         this.last_pr = drawTreeDrawResult(this.drawid, obj).then(p => {\n            this.obj_painter = p;\n            if (!final) this.last_pr = null;\n            return p; // return painter for histogram\n         });\n      }\n\n      return final ? this.last_pr : null;\n   });\n}\n\n\n/** @summary Create painter to perform tree drawing on server side\n  * @private */\nfunction createTreePlayer(player) {\n   player.draw_first = true;\n\n   player.configureOnline = function(itemname, url, askey, root_version, expr) {\n      this.setItemName(itemname, '', this);\n      this.url = url;\n      this.root_version = root_version;\n      this.askey = askey;\n      this.draw_expr = expr;\n   };\n\n   player.configureTree = function(tree) {\n      this.local_tree = tree;\n   };\n\n   player.showExtraButtons = function(args) {\n      const main = this.selectDom(),\n         numentries = this.local_tree?.fEntries || 0;\n\n      main.select('.treedraw_more').remove(); // remove more button first\n\n      main.select('.treedraw_buttons').node().innerHTML +=\n          'Cut: <input class=\"treedraw_cut ui-corner-all ui-widget\" style=\"width:8em;margin-left:5px\" title=\"cut expression\"></input>'+\n          'Opt: <input class=\"treedraw_opt ui-corner-all ui-widget\" style=\"width:5em;margin-left:5px\" title=\"histogram draw options\"></input>'+\n          `Num: <input class=\"treedraw_number\" type='number' min=\"0\" max=\"${numentries}\" step=\"1000\" style=\"width:7em;margin-left:5px\" title=\"number of entries to process (default all)\"></input>`+\n          `First: <input class=\"treedraw_first\" type='number' min=\"0\" max=\"${numentries}\" step=\"1000\" style=\"width:7em;margin-left:5px\" title=\"first entry to process (default first)\"></input>`+\n          '<button class=\"treedraw_clear\" title=\"Clear drawing\">Clear</button>';\n\n      main.select('.treedraw_exe').on('click', () => this.performDraw());\n      main.select('.treedraw_cut').property('value', args?.parse_cut || '').on('change', () => this.performDraw());\n      main.select('.treedraw_opt').property('value', args?.drawopt || '').on('change', () => this.performDraw());\n      main.select('.treedraw_number').attr('value', args?.numentries || ''); // .on('change', () => this.performDraw());\n      main.select('.treedraw_first').attr('value', args?.firstentry || ''); // .on('change', () => this.performDraw());\n      main.select('.treedraw_clear').on('click', () => cleanup(this.drawid));\n   };\n\n   player.showPlayer = function(args) {\n      const main = this.selectDom();\n\n      this.drawid = 'jsroot_tree_player_' + internals.id_counter++ + '_draw';\n\n      const show_extra = args?.parse_cut || args?.numentries || args?.firstentry;\n\n      main.html('<div style=\"display:flex; flex-flow:column; height:100%; width:100%;\">'+\n                   '<div class=\"treedraw_buttons\" style=\"flex: 0 1 auto;margin-top:0.2em;\">' +\n                      '<button class=\"treedraw_exe\" title=\"Execute draw expression\" style=\"margin-left:0.5em\">Draw</button>' +\n                      'Expr:<input class=\"treedraw_varexp treedraw_varexp_info\" style=\"width:12em;margin-left:5px\" title=\"draw expression\"></input>'+\n                      '<label class=\"treedraw_varexp_info\">\\u24D8</label>' +\n                     '<button class=\"treedraw_more\">More</button>' +\n                   '</div>' +\n                   '<div style=\"flex: 0 1 auto\"><hr/></div>' +\n                   `<div id=\"${this.drawid}\" style=\"flex: 1 1 auto; overflow:hidden;\"></div>` +\n                '</div>');\n\n      // only when main html element created, one can set painter\n      // ObjectPainter allow such usage of methods from BasePainter\n      this.setTopPainter();\n\n      if (this.local_tree) {\n         main.select('.treedraw_buttons')\n             .attr('title', 'Tree draw player for: ' + this.local_tree.fName);\n      }\n      main.select('.treedraw_exe').on('click', () => this.performDraw());\n      main.select('.treedraw_varexp')\n          .attr('value', args?.parse_expr || this.draw_expr || 'px:py')\n          .on('change', () => this.performDraw());\n      main.select('.treedraw_varexp_info')\n          .attr('title', 'Example of valid draw expressions:\\n' +\n                         '  px - 1-dim draw\\n' +\n                         '  px:py - 2-dim draw\\n' +\n                         '  px:py:pz - 3-dim draw\\n' +\n                         '  px+py:px-py - use any expressions\\n' +\n                         '  px:py>>Graph - create and draw TGraph\\n' +\n                         '  px:py>>dump - dump extracted variables\\n' +\n                         '  px:py>>h(50,-5,5,50,-5,5) - custom histogram\\n' +\n                         '  px:py;hbins:100 - custom number of bins');\n\n      if (show_extra)\n         this.showExtraButtons(args);\n      else\n         main.select('.treedraw_more').on('click', () => this.showExtraButtons(args));\n\n      this.checkResize();\n\n      registerForResize(this);\n   };\n\n   player.getValue = function(sel) {\n      const elem = this.selectDom().select(sel);\n      if (elem.empty()) return;\n      const val = elem.property('value');\n      if (val !== undefined) return val;\n      return elem.attr('value');\n   };\n\n   player.performLocalDraw = function() {\n      if (!this.local_tree) return;\n\n      const frame = this.selectDom(),\n            args = { expr: this.getValue('.treedraw_varexp') };\n\n      if (frame.select('.treedraw_more').empty()) {\n         args.cut = this.getValue('.treedraw_cut');\n         if (!args.cut) delete args.cut;\n\n         args.drawopt = this.getValue('.treedraw_opt');\n         if (args.drawopt === 'dump') { args.dump = true; args.drawopt = ''; }\n         if (!args.drawopt) delete args.drawopt;\n\n         args.numentries = parseInt(this.getValue('.treedraw_number'));\n         if (!Number.isInteger(args.numentries)) delete args.numentries;\n\n         args.firstentry = parseInt(this.getValue('.treedraw_first'));\n         if (!Number.isInteger(args.firstentry)) delete args.firstentry;\n      }\n\n      /* if (args.drawopt) */ cleanup(this.drawid);\n\n      args.drawid = this.drawid;\n\n      args.progress = treeDrawProgress.bind(args);\n\n      treeDraw(this.local_tree, args).then(obj => args.progress(obj, true));\n   };\n\n   player.getDrawOpt = function() {\n      let res = 'player';\n      const expr = this.getValue('.treedraw_varexp');\n      if (expr) res += ':' + expr;\n      return res;\n   };\n\n   player.performDraw = function() {\n      if (this.local_tree)\n         return this.performLocalDraw();\n\n      const frame = this.selectDom();\n      let url = this.url + '/exe.json.gz?compact=3&method=Draw',\n          expr = this.getValue('.treedraw_varexp'),\n          hname = 'h_tree_draw', option = '';\n      const pos = expr.indexOf('>>');\n\n      if (pos < 0)\n         expr += `>>${hname}`;\n       else {\n         hname = expr.slice(pos+2);\n         if (hname[0] === '+') hname = hname.slice(1);\n         const pos2 = hname.indexOf('(');\n         if (pos2 > 0) hname = hname.slice(0, pos2);\n      }\n\n      if (frame.select('.treedraw_more').empty()) {\n         const cut = this.getValue('.treedraw_cut');\n         let nentries = this.getValue('.treedraw_number'),\n             firstentry = this.getValue('.treedraw_first');\n\n         option = this.getValue('.treedraw_opt');\n\n         url += `&prototype=\"const char*,const char*,Option_t*,Long64_t,Long64_t\"&varexp=\"${expr}\"&selection=\"${cut}\"`;\n\n         // provide all optional arguments - default value kMaxEntries not works properly in ROOT6\n         if (!nentries) nentries = 'TTree::kMaxEntries'; // kMaxEntries available since ROOT 6.05/03\n         if (!firstentry) firstentry = '0';\n         url += `&option=\"${option}\"&nentries=${nentries}&firstentry=${firstentry}`;\n      } else\n         url += `&prototype=\"Option_t*\"&opt=\"${expr}\"`;\n\n      url += `&_ret_object_=${hname}`;\n\n      const submitDrawRequest = () => {\n         httpRequest(url, 'object').then(res => {\n            cleanup(this.drawid);\n            drawTreeDrawResult(this.drawid, res, option);\n         });\n      };\n\n      this.draw_expr = expr;\n\n      if (this.askey) {\n         // first let read tree from the file\n         this.askey = false;\n         httpRequest(this.url + '/root.json.gz?compact=3', 'text').then(submitDrawRequest);\n      } else\n         submitDrawRequest();\n   };\n\n   player.checkResize = function(/* arg */) {\n      resize(this.drawid);\n   };\n\n   return player;\n}\n\n\n/** @summary function used with THttpServer to assign player for the TTree object\n  * @private */\nfunction drawTreePlayer(hpainter, itemname, askey, asleaf) {\n   let item = hpainter.findItem(itemname),\n       expr = '', leaf_cnt = 0;\n   const top = hpainter.getTopOnlineItem(item);\n   if (!item || !top) return null;\n\n   if (asleaf) {\n      expr = item._name;\n      while (item && !item._ttree) item = item._parent;\n      if (!item) return null;\n      itemname = hpainter.itemFullName(item);\n   }\n\n   const url = hpainter.getOnlineItemUrl(itemname);\n   if (!url) return null;\n\n   const root_version = top._root_version || 400129, // by default use version number 6-27-01\n\n    mdi = hpainter.getDisplay();\n   if (!mdi) return null;\n\n   const frame = mdi.findFrame(itemname, true);\n   if (!frame) return null;\n\n   const divid = d3_select(frame).attr('id'),\n       player = new BasePainter(divid);\n\n   if (item._childs && !asleaf) {\n      for (let n = 0; n < item._childs.length; ++n) {\n         const leaf = item._childs[n];\n         if (leaf && leaf._kind && (leaf._kind.indexOf(prROOT + 'TLeaf') === 0) && (leaf_cnt < 2)) {\n            if (leaf_cnt++ > 0) expr += ':';\n            expr += leaf._name;\n         }\n      }\n   }\n\n   createTreePlayer(player);\n   player.configureOnline(itemname, url, askey, root_version, expr);\n   player.showPlayer();\n\n   return player;\n}\n\n/** @summary function used with THttpServer when tree is not yet loaded\n  * @private */\nfunction drawTreePlayerKey(hpainter, itemname) {\n   return drawTreePlayer(hpainter, itemname, true);\n}\n\n/** @summary function used with THttpServer when tree is not yet loaded\n  * @private */\nfunction drawLeafPlayer(hpainter, itemname) {\n   return drawTreePlayer(hpainter, itemname, false, true);\n}\n\n/** @summary function called from draw()\n  * @desc just envelope for real TTree::Draw method which do the main job\n  * Can be also used for the branch and leaf object\n  * @private */\nasync function drawTree(dom, obj, opt) {\n   let tree = obj, args = opt;\n\n   if (obj._typename === clTBranchFunc) {\n      // fictional object, created only in browser\n      args = { expr: `.${obj.func}()`, branch: obj.branch };\n      if (opt && opt.indexOf('dump') === 0)\n         args.expr += '>>' + opt;\n      else if (opt)\n         args.expr += opt;\n      tree = obj.branch.$tree;\n   } else if (obj.$branch) {\n      // this is drawing of the single leaf from the branch\n      args = { expr: `.${obj.fName}${opt || ''}`, branch: obj.$branch };\n      if ((args.branch.fType === kClonesNode) || (args.branch.fType === kSTLNode)) {\n         // special case of size\n         args.expr = opt;\n         args.direct_branch = true;\n      }\n\n      tree = obj.$branch.$tree;\n   } else if (obj.$tree) {\n      // this is drawing of the branch\n\n      // if generic object tried to be drawn without specifying any options, it will be just dump\n      if (!opt && obj.fStreamerType && (obj.fStreamerType !== kTString) &&\n          (obj.fStreamerType >= kObject) && (obj.fStreamerType <= kAnyP)) opt = 'dump';\n\n      args = { expr: opt, branch: obj };\n      tree = obj.$tree;\n   } else {\n      if (!args) args = 'player';\n      if (isStr(args)) args = { expr: args };\n   }\n\n   if (!tree)\n      throw Error('No TTree object available for TTree::Draw');\n\n   if (isStr(args.expr)) {\n      const p = args.expr.indexOf('player');\n      if (p === 0) {\n         args.player = true;\n         args.expr = args.expr.slice(6);\n         if (args.expr[0] === ':') args.expr = args.expr.slice(1);\n      } else if ((p >= 0) && (p === args.expr.length-6)) {\n         args.player = true;\n         args.expr = args.expr.slice(0, p);\n         if ((p > 0) && (args.expr[p-1] === ';')) args.expr = args.expr.slice(0, p-1);\n      }\n   }\n\n   let painter;\n\n   if (args.player) {\n      painter = new ObjectPainter(dom, obj, opt);\n      createTreePlayer(painter);\n      painter.configureTree(tree);\n      painter.showPlayer(args);\n      args.drawid = painter.drawid;\n   } else\n      args.drawid = dom;\n\n\n   // use in result handling same function as for progress handling\n\n   args.progress = treeDrawProgress.bind(args);\n\n   let pr;\n   if (args.expr === 'testio') {\n      args.testio = true;\n      args.showProgress = msg => showProgress(msg, -1, () => { args._break = 1; });\n      pr = treeIOTest(tree, args);\n   } else if (args.expr || args.branch)\n      pr = treeDraw(tree, args);\n    else\n      return painter;\n\n   return pr.then(res => args.progress(res, true));\n}\n\nexport { drawTree, drawTreePlayer, drawTreePlayerKey, drawLeafPlayer };\n","import { TGraphPainter as TGraphPainter2D } from '../hist2d/TGraphPainter.mjs';\nimport { TH1Painter } from './TH1Painter.mjs';\nimport { createLineSegments, create3DLineMaterial } from '../base/base3d.mjs';\n\n\nclass TGraphPainter extends TGraphPainter2D {\n\n   /** @summary Draw TGraph points in 3D\n     * @private */\n   drawBins3D(fp, graph) {\n      if (!fp.mode3d || !fp.grx || !fp.gry || !fp.grz || !fp.toplevel)\n         return console.log('Frame painter missing base 3d elements');\n\n      if (fp.zoom_xmin !== fp.zoom_xmax)\n        if ((this.options.pos3d < fp.zoom_xmin) || (this.options.pos3d > fp.zoom_xmax)) return;\n\n      this.createGraphDrawAttributes(true);\n\n      const drawbins = this.optimizeBins(1000);\n      let first = 0, last = drawbins.length-1;\n\n      if (fp.zoom_ymin !== fp.zoom_ymax) {\n         while ((first < last) && (drawbins[first].x < fp.zoom_ymin)) first++;\n         while ((first < last) && (drawbins[last].x > fp.zoom_ymax)) last--;\n      }\n\n      if (first === last) return;\n\n      const pnts = [], grx = fp.grx(this.options.pos3d);\n      let p0 = drawbins[first];\n\n      for (let n = first + 1; n <= last; ++n) {\n         const p1 = drawbins[n];\n         pnts.push(grx, fp.gry(p0.x), fp.grz(p0.y),\n                   grx, fp.gry(p1.x), fp.grz(p1.y));\n         p0 = p1;\n      }\n\n      const lines = createLineSegments(pnts, create3DLineMaterial(this, graph));\n\n      fp.add3DMesh(lines, this, true);\n\n      fp.render3D(100);\n   }\n\n   /** @summary Draw axis histogram\n     * @private */\n   async drawAxisHisto() {\n      return TH1Painter.draw(this.getDom(), this.createHistogram(), this.options.Axis);\n   }\n\n   static async draw(dom, graph, opt) {\n      return TGraphPainter._drawGraph(new TGraphPainter(dom, graph), opt);\n   }\n\n} // class TGraphPainter\n\nexport { TGraphPainter };\n"],"names":["async","drawPolyMarker3D","fp","this","$fp","getFramePainter","isObject","grx","gry","grz","poly","getObject","fP","step","numselect","i","length","scale_xmin","scale_xmax","scale_ymin","scale_ymax","scale_zmin","scale_zmax","settings","OptimizeDraw","Math","floor","size","pnts","PointsCreator","webgl","size_x3d","index","Int32Array","select","icnt","addPoint","createPoints","color","getColor","fMarkerColor","style","fMarkerStyle","then","mesh","tip_color","tip_name","fName","scale0","scale","add3DMesh","tooltip","intersect","indx","nvertex","x1","x2","y1","y2","z1","z2","lines","axisAsText","render3D","drawTreeDrawResult","dom","obj","opt","typ","_typename","isStr","indexOf","clTH1","TH1Painter","draw","clTH2","TH2Painter","clTH3","TH3Painter","clTGraph","TGraphPainter","clTPolyMarker3D","$hist","p2","ObjectPainter","addToPadPrimitives","redraw","Promise","reject","Error","treeDrawProgress","final","last_pr","dump","testio","isBatchMode","painter","BasePainter","drawid","selectDom","property","isFunc","internals","drawInspector","str","create","clTObjString","fString","toJSON","drawRawText","resolve","obj_painter","redrawObject","p","console","log","createTreePlayer","player","draw_first","configureOnline","itemname","url","askey","root_version","expr","setItemName","draw_expr","configureTree","tree","local_tree","showExtraButtons","args","main","numentries","fEntries","remove","node","innerHTML","on","performDraw","parse_cut","drawopt","attr","firstentry","cleanup","showPlayer","id_counter","show_extra","html","setTopPainter","parse_expr","checkResize","registerForResize","getValue","sel","elem","empty","val","undefined","performLocalDraw","frame","cut","parseInt","Number","isInteger","progress","bind","treeDraw","getDrawOpt","res","hname","option","pos","slice","pos2","nentries","submitDrawRequest","httpRequest","resize","drawTreePlayer","hpainter","asleaf","item","findItem","leaf_cnt","top","getTopOnlineItem","_name","_ttree","_parent","itemFullName","getOnlineItemUrl","_root_version","mdi","getDisplay","findFrame","divid","d3_select","_childs","n","leaf","_kind","prROOT","drawTreePlayerKey","drawLeafPlayer","drawTree","pr","clTBranchFunc","func","branch","$tree","$branch","fType","kClonesNode","kSTLNode","direct_branch","fStreamerType","kTString","kObject","kAnyP","showProgress","msg","_break","treeIOTest","TDrawSelector","prototype","ShowProgress","value","ret","isFinite","last_progress","diff","aver_diff","ndig","toFixed","TGraphPainter2D","drawBins3D","graph","mode3d","toplevel","zoom_xmin","zoom_xmax","options","pos3d","createGraphDrawAttributes","drawbins","optimizeBins","first","last","zoom_ymin","zoom_ymax","x","p0","p1","push","y","createLineSegments","create3DLineMaterial","drawAxisHisto","getDom","createHistogram","Axis","_drawGraph"],"sourceRoot":""}
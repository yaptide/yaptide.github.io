{"version":3,"file":"static/js/4763.c413b626.chunk.js","mappings":"qNAOA,MAAMA,GAAWC,EAAAA,EAAAA,KAAI,IAErB,MAAMC,UAAqBC,EAAAA,GAGxBC,SAAAA,CAAUC,EAAGC,GACV,MAAMC,EAAWC,KAAKC,MAAMC,KAAKC,GAAGD,KAAKE,KAAK,GAAKF,KAAKG,GAAGH,KAAKI,KAAK,GACjEC,EAAMP,KAAKC,MAAMJ,EAAEK,KAAKC,KAAK,GAAKL,EAAEI,KAAKG,KAAK,GAAGN,EACjDS,EAAMR,KAAKC,MAAMJ,EAAEK,KAAKE,KAAK,GAAKN,EAAEI,KAAKI,KAAK,GAAGP,EAElDG,KAAKO,KADJF,EAAM,GACK,EACNC,EAAM,IACC,EAED,CAClB,CAGAE,QAAAA,CAASC,EAAIC,GACQ,IAAdV,KAAKO,OAAcP,KAAKC,IAAMQ,EAAIT,KAAKG,IAAMO,IAC9B,IAAfV,KAAKO,OAAeP,KAAKE,IAAMO,EAAIT,KAAKI,IAAMM,GAClDV,KAAKW,OAAOC,OAAO,QAAQC,KAAK,IAAKb,KAAKc,aAC7C,CAGAC,OAAAA,CAAQC,GACL,GAAIA,EAAa,OACjB,MAAMC,EAAOjB,KAAKkB,YAClB,IAAIC,EAAO,GACXF,EAAKG,IAAMpB,KAAKqB,UAAU,IAAKrB,KAAKC,GAAID,KAAKsB,OAC7CL,EAAKM,IAAMvB,KAAKqB,UAAU,IAAKrB,KAAKE,GAAIF,KAAKsB,OAC7CL,EAAKO,IAAMxB,KAAKqB,UAAU,IAAKrB,KAAKG,GAAIH,KAAKsB,OAC7CL,EAAKQ,IAAMzB,KAAKqB,UAAU,IAAKrB,KAAKI,GAAIJ,KAAKsB,OAC3B,IAAdtB,KAAKO,OAAYY,GAAQ,SAASF,EAAKG,eAAeH,EAAKO,WAC5C,IAAfxB,KAAKO,OAAaY,GAAQ,SAASF,EAAKM,eAAeN,EAAKQ,UAChEzB,KAAK0B,eAAeP,EAAO,aAC9B,CAGAQ,WAAAA,GACG,MAAMV,EAAOjB,KAAKkB,YAElBlB,KAAKsB,MAAQL,EAAKW,QAAQtC,GAE1B,MAAMuC,EAAO7B,KAAK8B,iBAAiB9B,KAAKsB,OAAO,GAAM,GAErDtB,KAAKC,GAAK4B,EAAKlC,EAAEsB,EAAKG,KACtBpB,KAAKG,GAAK0B,EAAKjC,EAAEqB,EAAKO,KACtBxB,KAAKE,GAAK2B,EAAKlC,EAAEsB,EAAKM,KACtBvB,KAAKI,GAAKyB,EAAKjC,EAAEqB,EAAKQ,KAEtBzB,KAAK+B,cAAc,CAAElB,KAAMI,GAC9B,CAGAH,UAAAA,GACG,MAAMb,EAAKH,KAAKkC,MAAMhC,KAAKC,IAAKC,EAAKJ,KAAKkC,MAAMhC,KAAKE,IAAKC,EAAKL,KAAKkC,MAAMhC,KAAKG,IAAKC,EAAKN,KAAKkC,MAAMhC,KAAKI,IACzG,MAAO,IAAIH,KAAME,KAAQF,IAAOC,EAAK,IAAIE,IAAQD,IAAOC,EAAK,IAAIF,IAAO,IAAIA,KAAME,IACrF,CAGA6B,SAAAA,GAAa,CAGbC,MAAAA,GACGlC,KAAKmC,UAELnC,KAAK2B,cAEL,MAAMS,EAAOpC,KAAKW,OAAO0B,OAAO,YACdxB,KAAK,IAAKb,KAAKc,cACfwB,KAAKtC,KAAKuC,QAAQV,MAUpC,OARI7B,KAAKkB,aAAasB,aACnBJ,EAAKK,UAELzC,KAAKiC,UAAUG,IACfM,EAAAA,EAAAA,IAAe1C,OACf2C,EAAAA,EAAAA,IAAkB3C,KAAM4C,EAAAA,KAGpB5C,IACV,CAGA,iBAAa6C,CAAKC,EAAKC,EAAKC,GACzB,MAAMC,EAAU,IAAIzD,EAAasD,EAAKC,EAAKC,GAC3C,OAAOE,EAAAA,EAAAA,eAAcD,GAAS,GAAOE,MAAK,IAAMF,EAAQf,UAC3D,E","sources":["../node_modules/jsroot/modules/draw/TLinePainter.mjs"],"sourcesContent":["import { BIT } from '../core.mjs';\nimport { ObjectPainter } from '../base/ObjectPainter.mjs';\nimport { ensureTCanvas } from '../gpad/TCanvasPainter.mjs';\nimport { addMoveHandler } from '../gui/utils.mjs';\nimport { assignContextMenu, kToFront } from '../gui/menu.mjs';\n\n\nconst kLineNDC = BIT(14);\n\nclass TLinePainter extends ObjectPainter {\n\n   /** @summary Start interactive moving */\n   moveStart(x, y) {\n      const fullsize = Math.sqrt((this.x1-this.x2)**2 + (this.y1-this.y2)**2),\n          sz1 = Math.sqrt((x-this.x1)**2 + (y-this.y1)**2)/fullsize,\n          sz2 = Math.sqrt((x-this.x2)**2 + (y-this.y2)**2)/fullsize;\n      if (sz1 > 0.9)\n         this.side = 1;\n      else if (sz2 > 0.9)\n         this.side = -1;\n      else\n         this.side = 0;\n   }\n\n   /** @summary Continue interactive moving */\n   moveDrag(dx, dy) {\n      if (this.side !== 1) { this.x1 += dx; this.y1 += dy; }\n      if (this.side !== -1) { this.x2 += dx; this.y2 += dy; }\n      this.draw_g.select('path').attr('d', this.createPath());\n   }\n\n   /** @summary Finish interactive moving */\n   moveEnd(not_changed) {\n      if (not_changed) return;\n      const line = this.getObject();\n      let exec = '';\n      line.fX1 = this.svgToAxis('x', this.x1, this.isndc);\n      line.fX2 = this.svgToAxis('x', this.x2, this.isndc);\n      line.fY1 = this.svgToAxis('y', this.y1, this.isndc);\n      line.fY2 = this.svgToAxis('y', this.y2, this.isndc);\n      if (this.side !== 1) exec += `SetX1(${line.fX1});;SetY1(${line.fY1});;`;\n      if (this.side !== -1) exec += `SetX2(${line.fX2});;SetY2(${line.fY2});;`;\n      this.submitCanvExec(exec + 'Notify();;');\n   }\n\n   /** @summary Calculate line coordinates */\n   prepareDraw() {\n      const line = this.getObject();\n\n      this.isndc = line.TestBit(kLineNDC);\n\n      const func = this.getAxisToSvgFunc(this.isndc, true, true);\n\n      this.x1 = func.x(line.fX1);\n      this.y1 = func.y(line.fY1);\n      this.x2 = func.x(line.fX2);\n      this.y2 = func.y(line.fY2);\n\n      this.createAttLine({ attr: line });\n   }\n\n   /** @summary Create path */\n   createPath() {\n      const x1 = Math.round(this.x1), x2 = Math.round(this.x2), y1 = Math.round(this.y1), y2 = Math.round(this.y2);\n      return `M${x1},${y1}` + (x1 === x2 ? `V${y2}` : (y1 === y2 ? `H${x2}` : `L${x2},${y2}`));\n   }\n\n   /** @summary Add extras - used for TArrow */\n   addExtras() {}\n\n   /** @summary Redraw line */\n   redraw() {\n      this.createG();\n\n      this.prepareDraw();\n\n      const elem = this.draw_g.append('svg:path')\n                       .attr('d', this.createPath())\n                       .call(this.lineatt.func);\n\n      if (this.getObject()?.$do_not_draw)\n         elem.remove();\n      else {\n         this.addExtras(elem);\n         addMoveHandler(this);\n         assignContextMenu(this, kToFront);\n      }\n\n      return this;\n   }\n\n   /** @summary Draw TLine object */\n   static async draw(dom, obj, opt) {\n      const painter = new TLinePainter(dom, obj, opt);\n      return ensureTCanvas(painter, false).then(() => painter.redraw());\n   }\n\n} // class TLinePainter\n\n\nexport { TLinePainter };\n"],"names":["kLineNDC","BIT","TLinePainter","ObjectPainter","moveStart","x","y","fullsize","Math","sqrt","this","x1","x2","y1","y2","sz1","sz2","side","moveDrag","dx","dy","draw_g","select","attr","createPath","moveEnd","not_changed","line","getObject","exec","fX1","svgToAxis","isndc","fX2","fY1","fY2","submitCanvExec","prepareDraw","TestBit","func","getAxisToSvgFunc","createAttLine","round","addExtras","redraw","createG","elem","append","call","lineatt","$do_not_draw","remove","addMoveHandler","assignContextMenu","kToFront","draw","dom","obj","opt","painter","ensureTCanvas","then"],"sourceRoot":""}
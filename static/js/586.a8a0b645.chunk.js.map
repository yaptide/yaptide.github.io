{"version":3,"file":"static/js/586.a8a0b645.chunk.js","mappings":"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","sources":["../node_modules/jsroot/modules/hist/TEfficiencyPainter.mjs","../node_modules/jsroot/modules/hist/TF1Painter.mjs"],"sourcesContent":["import { BIT, create, createHistogram, isStr, clTH1, clTH2, clTH2F, kNoStats } from '../core.mjs';\nimport { ObjectPainter } from '../base/ObjectPainter.mjs';\nimport { TGraphPainter, clTGraphAsymmErrors } from '../hist2d/TGraphPainter.mjs';\nimport { TF1Painter } from '../hist/TF1Painter.mjs';\nimport { TH2Painter } from '../hist2d/TH2Painter.mjs';\nimport { getTEfficiencyBoundaryFunc } from '../base/math.mjs';\n\n\nconst kIsBayesian = BIT(14),  // Bayesian statistics are used\n      kPosteriorMode = BIT(15),  // Use posterior mean for best estimate (Bayesian statistics)\n //   kShortestInterval = BIT(16),  // Use shortest interval, not implemented - too complicated\n      kUseBinPrior = BIT(17),  // Use a different prior for each bin\n      kUseWeights = BIT(18),  // Use weights\n      getBetaAlpha = (obj, bin) => (obj.fBeta_bin_params.length > bin) ? obj.fBeta_bin_params[bin].first : obj.fBeta_alpha,\n      getBetaBeta = (obj, bin) => (obj.fBeta_bin_params.length > bin) ? obj.fBeta_bin_params[bin].second : obj.fBeta_beta;\n\n/**\n * @summary Painter for TEfficiency object\n *\n * @private\n */\n\nclass TEfficiencyPainter extends ObjectPainter {\n\n   /** @summary Caluclate efficiency */\n   getEfficiency(obj, bin) {\n      const BetaMean = (a, b) => (a <= 0 || b <= 0) ? 0 : a / (a + b),\n            BetaMode = (a, b) => {\n         if (a <= 0 || b <= 0) return 0;\n         if (a <= 1 || b <= 1) {\n            if (a < b) return 0;\n            if (a > b) return 1;\n            if (a === b) return 0.5; // cannot do otherwise\n         }\n         return (a - 1.0) / (a + b -2.0);\n      },\n      total = obj.fTotalHistogram.fArray[bin], // should work for both 1-d and 2-d\n      passed = obj.fPassedHistogram.fArray[bin]; // should work for both 1-d and 2-d\n\n      if (obj.TestBit(kIsBayesian)) {\n         // parameters for the beta prior distribution\n         const alpha = obj.TestBit(kUseBinPrior) ? getBetaAlpha(obj, bin) : obj.fBeta_alpha,\n               beta = obj.TestBit(kUseBinPrior) ? getBetaBeta(obj, bin) : obj.fBeta_beta;\n\n         let aa, bb;\n         if (obj.TestBit(kUseWeights)) {\n            const tw = total, // fTotalHistogram->GetBinContent(bin);\n                tw2 = obj.fTotalHistogram.fSumw2 ? obj.fTotalHistogram.fSumw2[bin] : Math.abs(total),\n                pw = passed; // fPassedHistogram->GetBinContent(bin);\n\n            if (tw2 <= 0) return pw/tw;\n\n            // tw/tw2 renormalize the weights\n            const norm = tw/tw2;\n            aa = pw * norm + alpha;\n            bb = (tw - pw) * norm + beta;\n         } else {\n            aa = passed + alpha;\n            bb = total - passed + beta;\n         }\n\n         if (!obj.TestBit(kPosteriorMode))\n            return BetaMean(aa, bb);\n         else\n            return BetaMode(aa, bb);\n      }\n\n      return total ? passed/total : 0;\n   }\n\n   /** @summary Caluclate efficiency error low */\n   getEfficiencyErrorLow(obj, bin, value) {\n      const total = obj.fTotalHistogram.fArray[bin],\n            passed = obj.fPassedHistogram.fArray[bin];\n      let alpha = 0, beta = 0;\n      if (obj.TestBit(kIsBayesian)) {\n         alpha = obj.TestBit(kUseBinPrior) ? getBetaAlpha(obj, bin) : obj.fBeta_alpha;\n         beta = obj.TestBit(kUseBinPrior) ? getBetaBeta(obj, bin) : obj.fBeta_beta;\n      }\n\n      return value - this.fBoundary(total, passed, obj.fConfLevel, false, alpha, beta);\n   }\n\n   /** @summary Caluclate efficiency error low up */\n   getEfficiencyErrorUp(obj, bin, value) {\n      const total = obj.fTotalHistogram.fArray[bin],\n            passed = obj.fPassedHistogram.fArray[bin];\n      let alpha = 0, beta = 0;\n      if (obj.TestBit(kIsBayesian)) {\n         alpha = obj.TestBit(kUseBinPrior) ? getBetaAlpha(obj, bin) : obj.fBeta_alpha;\n         beta = obj.TestBit(kUseBinPrior) ? getBetaBeta(obj, bin) : obj.fBeta_beta;\n      }\n\n      return this.fBoundary(total, passed, obj.fConfLevel, true, alpha, beta) - value;\n   }\n\n   /** @summary Copy drawning attributes */\n   copyAttributes(obj, eff) {\n      ['fLineColor', 'fLineStyle', 'fLineWidth', 'fFillColor', 'fFillStyle', 'fMarkerColor', 'fMarkerStyle', 'fMarkerSize'].forEach(name => { obj[name] = eff[name]; });\n   }\n\n   /** @summary Create graph for the drawing of 1-dim TEfficiency */\n   createGraph(/* eff */) {\n      const gr = create(clTGraphAsymmErrors);\n      gr.fName = 'eff_graph';\n      return gr;\n   }\n\n   /** @summary Create histogram for the drawing of 2-dim TEfficiency */\n   createHisto(eff) {\n      const nbinsx = eff.fTotalHistogram.fXaxis.fNbins,\n            nbinsy = eff.fTotalHistogram.fYaxis.fNbins,\n            hist = createHistogram(clTH2F, nbinsx, nbinsy);\n      Object.assign(hist.fXaxis, eff.fTotalHistogram.fXaxis);\n      Object.assign(hist.fYaxis, eff.fTotalHistogram.fYaxis);\n      hist.fName = 'eff_histo';\n      return hist;\n   }\n\n   /** @summary Fill graph with points from efficiency object */\n   fillGraph(gr, opt) {\n      const eff = this.getObject(),\n            xaxis = eff.fTotalHistogram.fXaxis,\n            npoints = xaxis.fNbins,\n            plot0Bins = (opt.indexOf('e0') >= 0);\n\n      for (let n = 0, j = 0; n < npoints; ++n) {\n         if (!plot0Bins && eff.fTotalHistogram.getBinContent(n+1) === 0) continue;\n\n         const value = this.getEfficiency(eff, n+1);\n\n         gr.fX[j] = xaxis.GetBinCenter(n+1);\n         gr.fY[j] = value;\n         gr.fEXlow[j] = xaxis.GetBinCenter(n+1) - xaxis.GetBinLowEdge(n+1);\n         gr.fEXhigh[j] = xaxis.GetBinLowEdge(n+2) - xaxis.GetBinCenter(n+1);\n         gr.fEYlow[j] = this.getEfficiencyErrorLow(eff, n+1, value);\n         gr.fEYhigh[j] = this.getEfficiencyErrorUp(eff, n+1, value);\n\n         gr.fNpoints = ++j;\n      }\n\n      gr.fTitle = eff.fTitle;\n      this.copyAttributes(gr, eff);\n   }\n\n   /** @summary Fill graph with points from efficiency object */\n   fillHisto(hist) {\n      const eff = this.getObject(),\n            nbinsx = hist.fXaxis.fNbins,\n            nbinsy = hist.fYaxis.fNbins;\n\n      for (let i = 0; i < nbinsx+2; ++i) {\n         for (let j = 0; j < nbinsy+2; ++j) {\n            const bin = hist.getBin(i, j),\n                value = this.getEfficiency(eff, bin);\n            hist.fArray[bin] = value;\n         }\n      }\n\n      hist.fTitle = eff.fTitle;\n      hist.fBits = hist.fBits | kNoStats;\n      this.copyAttributes(hist, eff);\n   }\n\n   /** @summary Draw function */\n   drawFunction(indx) {\n      const eff = this.getObject();\n\n      if (!eff?.fFunctions || (indx >= eff.fFunctions.arr.length))\n         return this;\n\n       return TF1Painter.draw(this.getDom(), eff.fFunctions.arr[indx], eff.fFunctions.opt[indx]).then(() => this.drawFunction(indx+1));\n   }\n\n   /** @summary Draw TEfficiency object */\n   static async draw(dom, eff, opt) {\n      if (!eff || !eff.fTotalHistogram)\n         return null;\n\n      if (!opt || !isStr(opt)) opt = '';\n      opt = opt.toLowerCase();\n\n      let ndim = 0;\n      if (eff.fTotalHistogram._typename.indexOf(clTH1) === 0)\n         ndim = 1;\n      else if (eff.fTotalHistogram._typename.indexOf(clTH2) === 0)\n         ndim = 2;\n      else\n         return null;\n\n      const painter = new TEfficiencyPainter(dom, eff);\n      painter.ndim = ndim;\n\n      painter.fBoundary = getTEfficiencyBoundaryFunc(eff.fStatisticOption, eff.TestBit(kIsBayesian));\n\n      let promise;\n\n      if (ndim === 1) {\n         if (!opt) opt = 'ap';\n         if ((opt.indexOf('same') < 0) && (opt.indexOf('a') < 0)) opt += 'a';\n         if (opt.indexOf('p') < 0) opt += 'p';\n\n         const gr = painter.createGraph(eff);\n         painter.fillGraph(gr, opt);\n         promise = TGraphPainter.draw(dom, gr, opt);\n      } else {\n         if (!opt) opt = 'col';\n         const hist = painter.createHisto(eff);\n         painter.fillHisto(hist, opt);\n         promise = TH2Painter.draw(dom, hist, opt);\n      }\n\n      return promise.then(() => {\n         painter.addToPadPrimitives();\n         return painter.drawFunction(0);\n      });\n   }\n\n} // class TEfficiencyPainter\n\nexport { TEfficiencyPainter };\n","import { settings, gStyle, isStr, isFunc, clTH1D, createHistogram, setHistogramTitle, clTF1, kNoStats } from '../core.mjs';\nimport { floatToString } from '../base/BasePainter.mjs';\nimport { getElementMainPainter, ObjectPainter } from '../base/ObjectPainter.mjs';\nimport { THistPainter } from '../hist2d/THistPainter.mjs';\nimport { TH1Painter } from '../hist2d/TH1Painter.mjs';\nimport { proivdeEvalPar, _getTF1Save } from '../base/func.mjs';\n\n\n/** @summary Create log scale for axis bins\n  * @private */\nfunction produceTAxisLogScale(axis, num, min, max) {\n   let lmin, lmax;\n\n   if (max > 0) {\n      lmax = Math.log(max);\n      lmin = min > 0 ? Math.log(min) : lmax - 5;\n   } else {\n      lmax = -10;\n      lmin = -15;\n   }\n\n   axis.fNbins = num;\n   axis.fXbins = new Array(num + 1);\n   for (let i = 0; i <= num; ++i)\n      axis.fXbins[i] = Math.exp(lmin + i / num * (lmax - lmin));\n   axis.fXmin = Math.exp(lmin);\n   axis.fXmax = Math.exp(lmax);\n}\n\nfunction scanTF1Options(opt) {\n   if (!isStr(opt)) opt = '';\n   let p = opt.indexOf(';webcanv_hist'), webcanv_hist = false, use_saved = 0;\n   if (p >= 0) {\n      webcanv_hist = true;\n      opt = opt.slice(0, p);\n   }\n   p = opt.indexOf(';force_saved');\n   if (p >= 0) {\n      use_saved = 2;\n      opt = opt.slice(0, p);\n   }\n   p = opt.indexOf(';prefer_saved');\n   if (p >= 0) {\n      use_saved = 1;\n      opt = opt.slice(0, p);\n   }\n   return { opt, webcanv_hist, use_saved };\n}\n\n\n/**\n  * @summary Painter for TF1 object\n  *\n  * @private\n  */\n\nclass TF1Painter extends TH1Painter {\n\n   /** @summary Returns drawn object name */\n   getObjectName() { return this.$func?.fName ?? 'func'; }\n\n   /** @summary Returns drawn object class name */\n   getClassName() { return this.$func?._typename ?? clTF1; }\n\n   /** @summary Returns true while function is drawn */\n   isTF1() { return true; }\n\n   /** @summary Returns primary function which was then drawn as histogram */\n   getPrimaryObject() { return this.$func; }\n\n   /** @summary Update function */\n   updateObject(obj /*, opt */) {\n      if (!obj || (this.getClassName() !== obj._typename)) return false;\n      delete obj.evalPar;\n      const histo = this.getHisto();\n\n      if (this.webcanv_hist) {\n         const h0 = this.getPadPainter()?.findInPrimitives('Func', clTH1D);\n         if (h0) this.updateAxes(histo, h0, this.getFramePainter());\n      }\n\n      this.$func = obj;\n      this.createTF1Histogram(obj, histo);\n      this.scanContent();\n      return true;\n   }\n\n   /** @summary Redraw TF1\n     * @private */\n   redraw(reason) {\n      if (!this._use_saved_points && (reason === 'logx' || reason === 'zoom')) {\n         this.createTF1Histogram(this.$func, this.getHisto());\n         this.scanContent();\n      }\n\n      return super.redraw(reason);\n   }\n\n   /** @summary Create histogram for TF1 drawing\n     * @private */\n   createTF1Histogram(tf1, hist) {\n      const fp = this.getFramePainter(),\n            pad = this.getPadPainter()?.getRootPad(true),\n            logx = pad?.fLogx,\n            gr = fp?.getGrFuncs(this.second_x, this.second_y);\n      let xmin = tf1.fXmin, xmax = tf1.fXmax, np = Math.max(tf1.fNpx, 100);\n\n      if (gr?.zoom_xmin !== gr?.zoom_xmax) {\n         const dx = (xmax - xmin) / np;\n         if ((xmin < gr.zoom_xmin) && (gr.zoom_xmin < xmax))\n            xmin = Math.max(xmin, gr.zoom_xmin - dx);\n         if ((xmin < gr.zoom_xmax) && (gr.zoom_xmax < xmax))\n            xmax = Math.min(xmax, gr.zoom_xmax + dx);\n      }\n\n      this._use_saved_points = (tf1.fSave.length > 3) && (settings.PreferSavedPoints || (this.use_saved > 1));\n\n      const ensureBins = num => {\n         if (hist.fNcells !== num + 2) {\n            hist.fNcells = num + 2;\n            hist.fArray = new Float32Array(hist.fNcells);\n         }\n         hist.fArray.fill(0);\n         hist.fXaxis.fNbins = num;\n         hist.fXaxis.fXbins = [];\n      };\n\n      delete this._fail_eval;\n\n      // this._use_saved_points = true;\n\n      if (!this._use_saved_points) {\n         let iserror = false;\n\n         if (!tf1.evalPar) {\n            try {\n               if (!proivdeEvalPar(tf1))\n                  iserror = true;\n            } catch {\n               iserror = true;\n            }\n         }\n\n         ensureBins(np);\n\n         if (logx)\n            produceTAxisLogScale(hist.fXaxis, np, xmin, xmax);\n          else {\n            hist.fXaxis.fXmin = xmin;\n            hist.fXaxis.fXmax = xmax;\n         }\n\n         for (let n = 0; (n < np) && !iserror; n++) {\n            const x = hist.fXaxis.GetBinCenter(n + 1);\n            let y = 0;\n            try {\n               y = tf1.evalPar(x);\n            } catch (err) {\n               iserror = true;\n            }\n\n            if (!iserror)\n               hist.setBinContent(n + 1, Number.isFinite(y) ? y : 0);\n         }\n\n         if (iserror)\n            this._fail_eval = true;\n\n         if (iserror && (tf1.fSave.length > 3))\n            this._use_saved_points = true;\n      }\n\n      // in the case there were points have saved and we cannot calculate function\n      // if we don't have the user's function\n      if (this._use_saved_points) {\n         np = tf1.fSave.length - 3;\n         let custom_xaxis = null;\n         xmin = tf1.fSave[np + 1];\n         xmax = tf1.fSave[np + 2];\n\n         if (xmin === xmax) {\n            // xmin = tf1.fSave[np];\n            const mp = this.getMainPainter();\n            if (isFunc(mp?.getHisto))\n               custom_xaxis = mp?.getHisto()?.fXaxis;\n         }\n\n         if (custom_xaxis) {\n            ensureBins(hist.fXaxis.fNbins);\n            Object.assign(hist.fXaxis, custom_xaxis);\n            // TODO: find first bin\n\n            for (let n = 0; n < np; ++n) {\n               const y = tf1.fSave[n];\n               hist.setBinContent(n + 1, Number.isFinite(y) ? y : 0);\n            }\n         } else {\n            ensureBins(tf1.fNpx);\n            hist.fXaxis.fXmin = tf1.fXmin;\n            hist.fXaxis.fXmax = tf1.fXmax;\n\n            for (let n = 0; n < tf1.fNpx; ++n) {\n               const y = _getTF1Save(tf1, hist.fXaxis.GetBinCenter(n + 1));\n               hist.setBinContent(n + 1, Number.isFinite(y) ? y : 0);\n            }\n         }\n      }\n\n      hist.fName = 'Func';\n      setHistogramTitle(hist, tf1.fTitle);\n      hist.fMinimum = tf1.fMinimum;\n      hist.fMaximum = tf1.fMaximum;\n      hist.fLineColor = tf1.fLineColor;\n      hist.fLineStyle = tf1.fLineStyle;\n      hist.fLineWidth = tf1.fLineWidth;\n      hist.fFillColor = tf1.fFillColor;\n      hist.fFillStyle = tf1.fFillStyle;\n      hist.fMarkerColor = tf1.fMarkerColor;\n      hist.fMarkerStyle = tf1.fMarkerStyle;\n      hist.fMarkerSize = tf1.fMarkerSize;\n      hist.fBits |= kNoStats;\n   }\n\n   /** @summary Extract function ranges */\n   extractAxesProperties(ndim) {\n      super.extractAxesProperties(ndim);\n\n      const func = this.$func, nsave = func?.fSave.length ?? 0;\n\n      if (nsave > 3 && this._use_saved_points) {\n         this.xmin = Math.min(this.xmin, func.fSave[nsave - 2]);\n         this.xmax = Math.max(this.xmax, func.fSave[nsave - 1]);\n      }\n      if (func) {\n         this.xmin = Math.min(this.xmin, func.fXmin);\n         this.xmax = Math.max(this.xmax, func.fXmax);\n      }\n   }\n\n   /** @summary Checks if it makes sense to zoom inside specified axis range */\n   canZoomInside(axis, min, max) {\n      const nsave = this.$func?.fSave.length ?? 0;\n      if ((nsave > 3) && this._use_saved_points && (axis === 'x')) {\n         // in the case where the points have been saved, useful for example\n         // if we don't have the user's function\n         const nb_points = nsave - 2,\n             xmin = this.$func.fSave[nsave - 2],\n             xmax = this.$func.fSave[nsave - 1];\n\n         return Math.abs(xmax - xmin) / nb_points < Math.abs(max - min);\n      }\n\n      // if function calculated, one always could zoom inside\n      return (axis === 'x') || (axis === 'y');\n   }\n\n      /** @summary retrurn tooltips for TF2 */\n   getTF1Tooltips(pnt) {\n      delete this.$tmp_tooltip;\n      const lines = [this.getObjectHint()],\n            funcs = this.getFramePainter()?.getGrFuncs(this.options.second_x, this.options.second_y);\n\n      if (!funcs || !isFunc(this.$func?.evalPar)) {\n         lines.push('grx = ' + pnt.x, 'gry = ' + pnt.y);\n         return lines;\n      }\n\n      const x = funcs.revertAxis('x', pnt.x);\n      let y = 0, gry = 0, iserror = false;\n\n       try {\n          y = this.$func.evalPar(x);\n          gry = Math.round(funcs.gry(y));\n       } catch {\n          iserror = true;\n       }\n\n      lines.push('x = ' + funcs.axisAsText('x', x),\n                 'value = ' + (iserror ? '<fail>' : floatToString(y, gStyle.fStatFormat)));\n\n      if (!iserror)\n         this.$tmp_tooltip = { y, gry };\n      return lines;\n   }\n\n   /** @summary process tooltip event for TF1 object */\n   processTooltipEvent(pnt) {\n      if (this._use_saved_points)\n         return super.processTooltipEvent(pnt);\n\n      let ttrect = this.draw_g?.selectChild('.tooltip_bin');\n\n      if (!this.draw_g || !pnt) {\n         ttrect?.remove();\n         return null;\n      }\n\n      const res = { name: this.$func?.fName, title: this.$func?.fTitle,\n                    x: pnt.x, y: pnt.y,\n                    color1: this.lineatt?.color ?? 'green',\n                    color2: this.fillatt?.getFillColorAlt('blue') ?? 'blue',\n                    lines: this.getTF1Tooltips(pnt), exact: true, menu: true };\n\n      if (pnt.disabled)\n         ttrect.remove();\n      else {\n         if (ttrect.empty()) {\n            ttrect = this.draw_g.append('svg:circle')\n                             .attr('class', 'tooltip_bin')\n                             .style('pointer-events', 'none')\n                             .style('fill', 'none')\n                             .attr('r', (this.lineatt?.width ?? 1) + 4);\n         }\n\n         ttrect.attr('cx', pnt.x)\n               .attr('cy', this.$tmp_tooltip.gry ?? pnt.y)\n               .call(this.lineatt?.func);\n      }\n\n      return res;\n   }\n\n   /** @summary fill information for TWebCanvas\n    * @desc Used to inform webcanvas when evaluation failed\n     * @private */\n   fillWebObjectOptions(opt) {\n      opt.fcust = this._fail_eval && !this.use_saved ? 'func_fail' : '';\n   }\n\n   /** @summary draw TF1 object */\n   static async draw(dom, tf1, opt) {\n      const web = scanTF1Options(opt);\n      opt = web.opt;\n      delete web.opt;\n      let hist;\n\n      if (web.webcanv_hist) {\n         const dummy = new ObjectPainter(dom);\n         hist = dummy.getPadPainter()?.findInPrimitives('Func', clTH1D);\n      }\n\n      if (!hist) {\n         hist = createHistogram(clTH1D, 100);\n         hist.fBits |= kNoStats;\n      }\n\n      if (!opt && getElementMainPainter(dom))\n         opt = 'same';\n\n      const painter = new TF1Painter(dom, hist);\n\n      painter.$func = tf1;\n      Object.assign(painter, web);\n\n      painter.createTF1Histogram(tf1, hist);\n\n      return THistPainter._drawHist(painter, opt);\n   }\n\n} // class TF1Painter\n\nexport { TF1Painter, produceTAxisLogScale, scanTF1Options };\n"],"names":["kIsBayesian","BIT","kPosteriorMode","kUseBinPrior","kUseWeights","getBetaAlpha","obj","bin","fBeta_bin_params","length","first","fBeta_alpha","getBetaBeta","second","fBeta_beta","TEfficiencyPainter","ObjectPainter","getEfficiency","total","fTotalHistogram","fArray","passed","fPassedHistogram","TestBit","alpha","beta","aa","bb","tw","tw2","fSumw2","Math","abs","norm","BetaMode","a","b","BetaMean","getEfficiencyErrorLow","value","this","fBoundary","fConfLevel","getEfficiencyErrorUp","copyAttributes","eff","forEach","name","createGraph","gr","create","clTGraphAsymmErrors","fName","createHisto","nbinsx","fXaxis","fNbins","nbinsy","fYaxis","hist","createHistogram","clTH2F","Object","assign","fillGraph","opt","getObject","xaxis","npoints","plot0Bins","indexOf","n","j","getBinContent","fX","GetBinCenter","fY","fEXlow","GetBinLowEdge","fEXhigh","fEYlow","fEYhigh","fNpoints","fTitle","fillHisto","i","getBin","fBits","kNoStats","drawFunction","indx","fFunctions","arr","TF1Painter","draw","getDom","then","dom","isStr","toLowerCase","ndim","_typename","clTH1","clTH2","painter","promise","getTEfficiencyBoundaryFunc","fStatisticOption","TGraphPainter","TH2Painter","addToPadPrimitives","produceTAxisLogScale","axis","num","min","max","lmin","lmax","log","fXbins","Array","exp","fXmin","fXmax","scanTF1Options","p","webcanv_hist","use_saved","slice","TH1Painter","getObjectName","$func","getClassName","clTF1","isTF1","getPrimaryObject","updateObject","evalPar","histo","getHisto","h0","getPadPainter","findInPrimitives","clTH1D","updateAxes","getFramePainter","createTF1Histogram","scanContent","redraw","reason","_use_saved_points","super","tf1","fp","pad","getRootPad","logx","fLogx","getGrFuncs","second_x","second_y","xmin","xmax","np","fNpx","zoom_xmin","zoom_xmax","dx","fSave","settings","PreferSavedPoints","ensureBins","fNcells","Float32Array","fill","_fail_eval","iserror","proivdeEvalPar","x","y","err","setBinContent","Number","isFinite","custom_xaxis","mp","getMainPainter","isFunc","_getTF1Save","setHistogramTitle","fMinimum","fMaximum","fLineColor","fLineStyle","fLineWidth","fFillColor","fFillStyle","fMarkerColor","fMarkerStyle","fMarkerSize","extractAxesProperties","func","nsave","canZoomInside","nb_points","getTF1Tooltips","pnt","$tmp_tooltip","lines","getObjectHint","funcs","options","push","revertAxis","gry","round","axisAsText","floatToString","gStyle","fStatFormat","processTooltipEvent","ttrect","draw_g","selectChild","remove","res","title","color1","lineatt","color","color2","fillatt","getFillColorAlt","exact","menu","disabled","empty","append","attr","style","width","call","fillWebObjectOptions","fcust","web","dummy","getElementMainPainter","THistPainter","_drawHist"],"sourceRoot":""}
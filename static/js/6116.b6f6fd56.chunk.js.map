{"version":3,"file":"static/js/6116.b6f6fd56.chunk.js","mappings":"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","sources":["../node_modules/jsroot/modules/draw/TASImagePainter.mjs"],"sourcesContent":["import { create, settings, isNodeJs, isStr, btoa_func, clTAxis, clTPaletteAxis, clTImagePalette, getDocument } from '../core.mjs';\nimport { toHex } from '../base/colors.mjs';\nimport { assignContextMenu } from '../gui/menu.mjs';\nimport { DrawOptions } from '../base/BasePainter.mjs';\nimport { ObjectPainter } from '../base/ObjectPainter.mjs';\nimport { TPavePainter } from '../hist/TPavePainter.mjs';\nimport { ensureTCanvas } from '../gpad/TCanvasPainter.mjs';\n\n/**\n * @summary Painter for TASImage object.\n *\n * @private\n */\n\nclass TASImagePainter extends ObjectPainter {\n\n   /** @summary Decode options string  */\n   decodeOptions(opt) {\n      const d = new DrawOptions(opt);\n\n      this.options = { Zscale: false };\n\n      const obj = this.getObject();\n\n      if (d.check('CONST')) {\n         this.options.constRatio = true;\n         if (obj) obj.fConstRatio = true;\n         console.log('use const');\n      }\n      if (d.check('Z')) this.options.Zscale = true;\n   }\n\n   /** @summary Create RGBA buffers */\n   createRGBA(nlevels) {\n      const obj = this.getObject(),\n            pal = obj?.fPalette;\n      if (!pal) return null;\n\n      const rgba = new Array((nlevels+1) * 4).fill(0); // precaclucated colors\n\n      for (let lvl = 0, indx = 1; lvl <= nlevels; ++lvl) {\n         const l = lvl/nlevels;\n         while ((pal.fPoints[indx] < l) && (indx < pal.fPoints.length-1)) indx++;\n\n         const r1 = (pal.fPoints[indx] - l) / (pal.fPoints[indx] - pal.fPoints[indx-1]),\n               r2 = (l - pal.fPoints[indx-1]) / (pal.fPoints[indx] - pal.fPoints[indx-1]);\n\n         rgba[lvl*4] = Math.min(255, Math.round((pal.fColorRed[indx-1] * r1 + pal.fColorRed[indx] * r2) / 256));\n         rgba[lvl*4+1] = Math.min(255, Math.round((pal.fColorGreen[indx-1] * r1 + pal.fColorGreen[indx] * r2) / 256));\n         rgba[lvl*4+2] = Math.min(255, Math.round((pal.fColorBlue[indx-1] * r1 + pal.fColorBlue[indx] * r2) / 256));\n         rgba[lvl*4+3] = Math.min(255, Math.round((pal.fColorAlpha[indx-1] * r1 + pal.fColorAlpha[indx] * r2) / 256));\n      }\n\n      return rgba;\n   }\n\n   /** @summary Create url using image buffer\n     * @private */\n   async makeUrlFromImageBuf(obj, fp) {\n      const nlevels = 1000;\n      this.rgba = this.createRGBA(nlevels); // precaclucated colors\n\n      let min = obj.fImgBuf[0], max = obj.fImgBuf[0];\n      for (let k = 1; k < obj.fImgBuf.length; ++k) {\n         const v = obj.fImgBuf[k];\n         min = Math.min(v, min);\n         max = Math.max(v, max);\n      }\n\n      // does not work properly in Node.js, causes 'Maximum call stack size exceeded' error\n      // min = Math.min.apply(null, obj.fImgBuf),\n      // max = Math.max.apply(null, obj.fImgBuf);\n\n      // create countor like in hist painter to allow palette drawing\n      this.fContour = {\n         arr: new Array(200),\n         rgba: this.rgba,\n         getLevels() { return this.arr; },\n         getPaletteColor(pal, zval) {\n            if (!this.arr || !this.rgba) return 'white';\n            const indx = Math.round((zval - this.arr[0]) / (this.arr[this.arr.length-1] - this.arr[0]) * (this.rgba.length-4)/4) * 4;\n            return '#' + toHex(this.rgba[indx], 1) + toHex(this.rgba[indx+1], 1) + toHex(this.rgba[indx+2], 1) + toHex(this.rgba[indx+3], 1);\n         }\n      };\n      for (let k = 0; k < 200; k++)\n         this.fContour.arr[k] = min + (max-min)/(200-1)*k;\n\n      if (min >= max) max = min + 1;\n\n      const z = this.getImageZoomRange(fp, obj.fConstRatio, obj.fWidth, obj.fHeight),\n            pr = isNodeJs()\n                 ? import('canvas').then(h => h.default.createCanvas(z.xmax - z.xmin, z.ymax - z.ymin))\n                 : new Promise(resolveFunc => {\n                    const c = document.createElement('canvas');\n                    c.width = z.xmax - z.xmin;\n                    c.height = z.ymax - z.ymin;\n                    resolveFunc(c);\n                 });\n\n      return pr.then(canvas => {\n         const context = canvas.getContext('2d'),\n               imageData = context.getImageData(0, 0, canvas.width, canvas.height),\n               arr = imageData.data;\n\n         for (let i = z.ymin; i < z.ymax; ++i) {\n            let dst = (z.ymax - i - 1) * (z.xmax - z.xmin) * 4;\n            const row = i * obj.fWidth;\n            for (let j = z.xmin; j < z.xmax; ++j) {\n               let iii = Math.round((obj.fImgBuf[row + j] - min) / (max - min) * nlevels) * 4;\n               // copy rgba value for specified point\n               arr[dst++] = this.rgba[iii++];\n               arr[dst++] = this.rgba[iii++];\n               arr[dst++] = this.rgba[iii++];\n               arr[dst++] = this.rgba[iii++];\n            }\n         }\n\n         context.putImageData(imageData, 0, 0);\n\n         return { url: canvas.toDataURL(), constRatio: obj.fConstRatio, can_zoom: true };\n      });\n   }\n\n   getImageZoomRange(fp, constRatio, width, height) {\n      const res = { xmin: 0, xmax: width, ymin: 0, ymax: height };\n      if (!fp) return res;\n\n      let offx = 0, offy = 0, sizex = width, sizey = height;\n\n      if (constRatio) {\n         const image_ratio = height/width,\n               frame_ratio = fp.getFrameHeight() / fp.getFrameWidth();\n\n         if (image_ratio > frame_ratio) {\n            const w2 = height / frame_ratio;\n            offx = Math.round((w2 - width)/2);\n            sizex = Math.round(w2);\n         } else {\n            const h2 = frame_ratio * width;\n            offy = Math.round((h2 - height)/2);\n            sizey = Math.round(h2);\n         }\n      }\n\n      if (fp.zoom_xmin !== fp.zoom_xmax) {\n         res.xmin = Math.min(width, Math.max(0, Math.round(fp.zoom_xmin * sizex) - offx));\n         res.xmax = Math.min(width, Math.max(0, Math.round(fp.zoom_xmax * sizex) - offx));\n      }\n      if (fp.zoom_ymin !== fp.zoom_ymax) {\n         res.ymin = Math.min(height, Math.max(0, Math.round(fp.zoom_ymin * sizey) - offy));\n         res.ymax = Math.min(height, Math.max(0, Math.round(fp.zoom_ymax * sizey) - offy));\n      }\n      return res;\n   }\n\n   /** @summary Produce data url from png buffer */\n   async makeUrlFromPngBuf(obj, fp) {\n      const buf = obj.fPngBuf;\n      let pngbuf = '';\n\n      if (isStr(buf))\n         pngbuf = buf;\n      else {\n         for (let k = 0; k < buf.length; ++k)\n            pngbuf += String.fromCharCode(buf[k] < 0 ? 256 + buf[k] : buf[k]);\n      }\n\n      const res = { url: 'data:image/png;base64,' + btoa_func(pngbuf), constRatio: obj.fConstRatio, can_zoom: fp && !isNodeJs() },\n            doc = getDocument();\n\n      if (!res.can_zoom || ((fp?.zoom_xmin === fp?.zoom_xmax) && (fp?.zoom_ymin === fp?.zoom_ymax)))\n         return res;\n\n      return new Promise(resolveFunc => {\n         const image = doc.createElement('img');\n\n         image.onload = () => {\n            const canvas = doc.createElement('canvas');\n            canvas.width = image.width;\n            canvas.height = image.height;\n\n            const context = canvas.getContext('2d');\n            context.drawImage(image, 0, 0);\n\n            const arr = context.getImageData(0, 0, image.width, image.height).data,\n                  z = this.getImageZoomRange(fp, res.constRatio, image.width, image.height),\n                  canvas2 = doc.createElement('canvas');\n            canvas2.width = z.xmax - z.xmin;\n            canvas2.height = z.ymax - z.ymin;\n\n            const context2 = canvas2.getContext('2d'),\n                  imageData2 = context2.getImageData(0, 0, canvas2.width, canvas2.height),\n                  arr2 = imageData2.data;\n\n            for (let i = z.ymin; i < z.ymax; ++i) {\n                let dst = (z.ymax - i - 1) * (z.xmax - z.xmin) * 4,\n                    src = ((image.height - i - 1) * image.width + z.xmin) * 4;\n                for (let j = z.xmin; j < z.xmax; ++j) {\n                   // copy rgba value for specified point\n                   arr2[dst++] = arr[src++];\n                   arr2[dst++] = arr[src++];\n                   arr2[dst++] = arr[src++];\n                   arr2[dst++] = arr[src++];\n                }\n            }\n\n            context2.putImageData(imageData2, 0, 0);\n\n            res.url = canvas2.toDataURL();\n\n            resolveFunc(res);\n         };\n\n         image.onerror = () => resolveFunc(res);\n\n         image.src = res.url;\n      });\n   }\n\n   /** @summary Draw image */\n   async drawImage() {\n      const obj = this.getObject(),\n            fp = this.getFramePainter(),\n            rect = fp?.getFrameRect() ?? this.getPadPainter().getPadRect();\n\n      this.wheel_zoomy = true;\n\n      if (obj._blob) {\n         // try to process blob data due to custom streamer\n         if ((obj._blob.length === 15) && !obj._blob[0]) {\n            obj.fImageQuality = obj._blob[1];\n            obj.fImageCompression = obj._blob[2];\n            obj.fConstRatio = obj._blob[3];\n            obj.fPalette = {\n                _typename: clTImagePalette,\n                fUniqueID: obj._blob[4],\n                fBits: obj._blob[5],\n                fNumPoints: obj._blob[6],\n                fPoints: obj._blob[7],\n                fColorRed: obj._blob[8],\n                fColorGreen: obj._blob[9],\n                fColorBlue: obj._blob[10],\n                fColorAlpha: obj._blob[11]\n            };\n\n            obj.fWidth = obj._blob[12];\n            obj.fHeight = obj._blob[13];\n            obj.fImgBuf = obj._blob[14];\n\n            if ((obj.fWidth * obj.fHeight !== obj.fImgBuf.length) ||\n                  (obj.fPalette.fNumPoints !== obj.fPalette.fPoints.length)) {\n               console.error(`TASImage _blob decoding error ${obj.fWidth * obj.fHeight} != ${obj.fImgBuf.length} ${obj.fPalette.fNumPoints} != ${obj.fPalette.fPoints.length}`);\n               delete obj.fImgBuf;\n               delete obj.fPalette;\n            }\n         } else if ((obj._blob.length === 3) && obj._blob[0]) {\n            obj.fPngBuf = obj._blob[2];\n            if (obj.fPngBuf?.length !== obj._blob[1]) {\n               console.error(`TASImage with png buffer _blob error ${obj._blob[1]} != ${obj.fPngBuf?.length}`);\n               delete obj.fPngBuf;\n            }\n         } else\n            console.error(`TASImage _blob len ${obj._blob.length} not recognized`);\n\n         delete obj._blob;\n      }\n\n      let promise;\n\n      if (obj.fImgBuf && obj.fPalette)\n         promise = this.makeUrlFromImageBuf(obj, fp);\n      else if (obj.fPngBuf)\n         promise = this.makeUrlFromPngBuf(obj, fp);\n      else\n         promise = Promise.resolve(null);\n\n      return promise.then(res => {\n         if (!res?.url)\n            return this;\n\n         const img = this.createG(!!fp)\n             .append('image')\n             .attr('href', res.url)\n             .attr('width', rect.width)\n             .attr('height', rect.height)\n             .attr('preserveAspectRatio', res.constRatio ? null : 'none');\n\n         if (!this.isBatchMode()) {\n            if (settings.MoveResize || settings.ContextMenu)\n               img.style('pointer-events', 'visibleFill');\n\n            if (res.can_zoom)\n               img.style('cursor', 'pointer');\n         }\n\n         assignContextMenu(this);\n\n         if (!fp || !res.can_zoom)\n            return this;\n\n         return this.drawColorPalette(this.options.Zscale, true).then(() => {\n            fp.setAxesRanges(create(clTAxis), 0, 1, create(clTAxis), 0, 1, null, 0, 0);\n            fp.createXY({ ndim: 2, check_pad_range: false });\n            return fp.addInteractivity();\n         });\n      });\n   }\n\n   /** @summary Fill TASImage context */\n   fillContextMenuItems(menu) {\n      const obj = this.getObject();\n      if (obj) {\n         menu.addchk(obj.fConstRatio, 'Const ratio', flag => {\n            obj.fConstRatio = flag;\n            this.interactiveRedraw('pad', `exec:SetConstRatio(${flag})`);\n         }, 'Change const ratio flag of image');\n      }\n      if (obj?.fPalette) {\n         menu.addchk(this.options.Zscale, 'Color palette', flag => {\n            this.options.Zscale = flag;\n            this.drawColorPalette(flag, true);\n         }, 'Toggle color palette');\n      }\n   }\n\n   /** @summary Checks if it makes sense to zoom inside specified axis range */\n   canZoomInside(axis, min, max) {\n      const obj = this.getObject();\n\n      if (!obj)\n         return false;\n\n      if (((axis === 'x') || (axis === 'y')) && (max - min > 0.01)) return true;\n\n      return false;\n   }\n\n   /** @summary Draw color palette\n     * @private */\n   async drawColorPalette(enabled, can_move) {\n      if (!this.isMainPainter())\n         return null;\n\n      if (!this.draw_palette) {\n         const pal = create(clTPaletteAxis);\n         Object.assign(pal, { fX1NDC: 0.91, fX2NDC: 0.95, fY1NDC: 0.1, fY2NDC: 0.9, fInit: 1 });\n         pal.fAxis.fChopt = '+';\n         this.draw_palette = pal;\n         this._color_palette = true; // to emulate behaviour of hist painter\n      }\n\n      let pal_painter = this.getPadPainter().findPainterFor(this.draw_palette);\n\n      if (!enabled) {\n         if (pal_painter) {\n            pal_painter.Enabled = false;\n            pal_painter.removeG(); // completely remove drawing without need to redraw complete pad\n         }\n         return null;\n      }\n\n      const fp = this.getFramePainter();\n\n      // keep palette width\n      if (can_move && fp) {\n         const pal = this.draw_palette;\n         pal.fX2NDC = fp.fX2NDC + 0.01 + (pal.fX2NDC - pal.fX1NDC);\n         pal.fX1NDC = fp.fX2NDC + 0.01;\n         pal.fY1NDC = fp.fY1NDC;\n         pal.fY2NDC = fp.fY2NDC;\n      }\n\n      if (pal_painter) {\n         pal_painter.Enabled = true;\n         return pal_painter.drawPave('');\n      }\n\n      const prev_name = this.selectCurrentPad(this.getPadName());\n\n      return TPavePainter.draw(this.getDom(), this.draw_palette).then(p => {\n         pal_painter = p;\n\n         this.selectCurrentPad(prev_name);\n         // mark painter as secondary - not in list of TCanvas primitives\n         pal_painter.setSecondary(this);\n\n         // make dummy redraw, palette will be updated only from histogram painter\n         pal_painter.redraw = function() {};\n      });\n   }\n\n   /** @summary Toggle colz draw option\n     * @private */\n   toggleColz() {\n      if (this.getObject()?.fPalette) {\n         this.options.Zscale = !this.options.Zscale;\n         return this.drawColorPalette(this.options.Zscale, true);\n      }\n   }\n\n   /** @summary Redraw image */\n   redraw() {\n      return this.drawImage();\n   }\n\n   /** @summary Process click on TASImage-defined buttons\n     * @desc may return promise or simply false */\n   clickButton(funcname) {\n      if (this.isMainPainter() && funcname === 'ToggleColorZ')\n         return this.toggleColz();\n\n      return false;\n   }\n\n   /** @summary Fill pad toolbar for TASImage */\n   fillToolbar() {\n      const pp = this.getPadPainter();\n      if (pp && this.getObject()?.fPalette) {\n         pp.addPadButton('th2colorz', 'Toggle color palette', 'ToggleColorZ');\n         pp.showPadButtons();\n      }\n   }\n\n   /** @summary Draw TASImage object */\n   static async draw(dom, obj, opt) {\n      const painter = new TASImagePainter(dom, obj, opt);\n      painter.setAsMainPainter();\n      painter.decodeOptions(opt);\n      return ensureTCanvas(painter, false)\n                 .then(() => painter.drawImage())\n                 .then(() => {\n                     painter.fillToolbar();\n                     return painter;\n                 });\n   }\n\n} // class TASImagePainter\n\nexport { TASImagePainter };\n"],"names":["TASImagePainter","ObjectPainter","decodeOptions","opt","d","DrawOptions","this","options","Zscale","obj","getObject","check","constRatio","fConstRatio","console","log","createRGBA","nlevels","pal","fPalette","rgba","Array","fill","lvl","indx","l","fPoints","length","r1","r2","Math","min","round","fColorRed","fColorGreen","fColorBlue","fColorAlpha","makeUrlFromImageBuf","fp","fImgBuf","max","k","v","fContour","arr","getLevels","getPaletteColor","zval","toHex","z","getImageZoomRange","fWidth","fHeight","isNodeJs","then","h","default","createCanvas","xmax","xmin","ymax","ymin","Promise","resolveFunc","c","document","createElement","width","height","canvas","context","getContext","imageData","getImageData","data","i","dst","row","j","iii","putImageData","url","toDataURL","can_zoom","res","offx","offy","sizex","sizey","image_ratio","frame_ratio","getFrameHeight","getFrameWidth","w2","h2","zoom_xmin","zoom_xmax","zoom_ymin","zoom_ymax","makeUrlFromPngBuf","buf","fPngBuf","pngbuf","isStr","String","fromCharCode","btoa_func","doc","getDocument","image","onload","drawImage","canvas2","context2","imageData2","arr2","src","onerror","getFramePainter","rect","getFrameRect","getPadPainter","getPadRect","promise","wheel_zoomy","_blob","error","fImageQuality","fImageCompression","_typename","clTImagePalette","fUniqueID","fBits","fNumPoints","resolve","img","createG","append","attr","isBatchMode","settings","MoveResize","ContextMenu","style","assignContextMenu","drawColorPalette","setAxesRanges","create","clTAxis","createXY","ndim","check_pad_range","addInteractivity","fillContextMenuItems","menu","addchk","flag","interactiveRedraw","canZoomInside","axis","enabled","can_move","isMainPainter","draw_palette","clTPaletteAxis","Object","assign","fX1NDC","fX2NDC","fY1NDC","fY2NDC","fInit","fAxis","fChopt","_color_palette","pal_painter","findPainterFor","Enabled","removeG","drawPave","prev_name","selectCurrentPad","getPadName","TPavePainter","draw","getDom","p","setSecondary","redraw","toggleColz","clickButton","funcname","fillToolbar","pp","addPadButton","showPadButtons","dom","painter","setAsMainPainter","ensureTCanvas"],"sourceRoot":""}
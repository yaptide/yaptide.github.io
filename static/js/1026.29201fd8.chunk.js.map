{"version":3,"file":"static/js/1026.29201fd8.chunk.js","mappings":"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","sources":["../node_modules/jsroot/modules/hist/TGraphPainter.mjs","../node_modules/jsroot/modules/hist2d/TMultiGraphPainter.mjs","../node_modules/jsroot/modules/hist/TMultiGraphPainter.mjs"],"sourcesContent":["import { TGraphPainter as TGraphPainter2D } from '../hist2d/TGraphPainter.mjs';\nimport { TH1Painter } from './TH1Painter.mjs';\nimport { createLineSegments, create3DLineMaterial } from '../base/base3d.mjs';\n\n\nclass TGraphPainter extends TGraphPainter2D {\n\n   /** @summary Draw TGraph points in 3D\n     * @private */\n   drawBins3D(fp, graph) {\n      if (!fp.mode3d || !fp.grx || !fp.gry || !fp.grz || !fp.toplevel)\n         return console.log('Frame painter missing base 3d elements');\n\n      if (fp.zoom_xmin !== fp.zoom_xmax)\n        if ((this.options.pos3d < fp.zoom_xmin) || (this.options.pos3d > fp.zoom_xmax)) return;\n\n      this.createGraphDrawAttributes(true);\n\n      const drawbins = this.optimizeBins(1000);\n      let first = 0, last = drawbins.length-1;\n\n      if (fp.zoom_ymin !== fp.zoom_ymax) {\n         while ((first < last) && (drawbins[first].x < fp.zoom_ymin)) first++;\n         while ((first < last) && (drawbins[last].x > fp.zoom_ymax)) last--;\n      }\n\n      if (first === last) return;\n\n      const pnts = [], grx = fp.grx(this.options.pos3d);\n      let p0 = drawbins[first];\n\n      for (let n = first + 1; n <= last; ++n) {\n         const p1 = drawbins[n];\n         pnts.push(grx, fp.gry(p0.x), fp.grz(p0.y),\n                   grx, fp.gry(p1.x), fp.grz(p1.y));\n         p0 = p1;\n      }\n\n      const lines = createLineSegments(pnts, create3DLineMaterial(this, graph));\n\n      fp.add3DMesh(lines, this, true);\n\n      fp.render3D(100);\n   }\n\n   /** @summary Draw axis histogram\n     * @private */\n   async drawAxisHisto() {\n      return TH1Painter.draw(this.getDom(), this.createHistogram(), this.options.Axis);\n   }\n\n   static async draw(dom, graph, opt) {\n      return TGraphPainter._drawGraph(new TGraphPainter(dom, graph), opt);\n   }\n\n} // class TGraphPainter\n\nexport { TGraphPainter };\n","import { create, createHistogram, clTH1I, clTH2I, clTObjString, clTHashList, kNoZoom, kNoStats } from '../core.mjs';\nimport { DrawOptions } from '../base/BasePainter.mjs';\nimport { ObjectPainter } from '../base/ObjectPainter.mjs';\nimport { FunctionsHandler } from './THistPainter.mjs';\nimport { TH1Painter, PadDrawOptions } from './TH1Painter.mjs';\nimport { TGraphPainter } from './TGraphPainter.mjs';\n\n\n/**\n * @summary Painter for TMultiGraph object.\n *\n * @private\n */\n\nclass TMultiGraphPainter extends ObjectPainter {\n\n   /** @summary Create painter\n     * @param {object|string} dom - DOM element for drawing or element id\n     * @param {object} obj - TMultiGraph object to draw */\n   constructor(dom, mgraph) {\n      super(dom, mgraph);\n      this.firstpainter = null;\n      this.autorange = false;\n      this.painters = []; // keep painters to be able update objects\n   }\n\n   /** @summary Cleanup multigraph painter */\n   cleanup() {\n      this.painters = [];\n      super.cleanup();\n   }\n\n   /** @summary Update multigraph object */\n   updateObject(obj) {\n      if (!this.matchObjectType(obj)) return false;\n\n      const mgraph = this.getObject(),\n            graphs = obj.fGraphs,\n            pp = this.getPadPainter();\n\n      mgraph.fTitle = obj.fTitle;\n\n      let isany = false;\n      if (this.firstpainter) {\n         let histo = obj.fHistogram;\n         if (this.autorange && !histo)\n            histo = this.scanGraphsRange(graphs);\n\n         if (this.firstpainter.updateObject(histo))\n            isany = true;\n      }\n\n      const ngr = Math.min(graphs.arr.length, this.painters.length);\n\n      for (let i = 0; i < ngr; ++i) {\n         if (this.painters[i].updateObject(graphs.arr[i], (graphs.opt[i] || this._restopt) + this._auto))\n            isany = true;\n      }\n\n      this._funcHandler = new FunctionsHandler(this, pp, obj.fFunctions);\n\n      return isany;\n   }\n\n   /** @summary Redraw multigraph\n     * @desc may redraw histogram which was used to draw axes\n     * @return {Promise} for ready */\n    async redraw(reason) {\n       const promise = this.firstpainter?.redraw(reason) ?? Promise.resolve(true),\n             redrawNext = async indx => {\n                if (indx >= this.painters.length)\n                   return this;\n                return this.painters[indx].redraw(reason).then(() => redrawNext(indx + 1));\n             };\n\n       return promise.then(() => redrawNext(0)).then(() => {\n          const res = this._funcHandler?.drawNext(0) ?? this;\n          delete this._funcHandler;\n          return res;\n       });\n    }\n\n   /** @summary Scan graphs range\n     * @return {object} histogram for axes drawing */\n   scanGraphsRange(graphs, histo, pad) {\n      const mgraph = this.getObject(),\n            rw = { xmin: 0, xmax: 0, ymin: 0, ymax: 0, first: true };\n      let maximum, minimum, logx = false, logy = false,\n          time_display = false, time_format = '';\n\n      if (pad) {\n         logx = pad.fLogx;\n         logy = pad.fLogv ?? pad.fLogy;\n         rw.xmin = pad.fUxmin;\n         rw.xmax = pad.fUxmax;\n         rw.ymin = pad.fUymin;\n         rw.ymax = pad.fUymax;\n         rw.first = false;\n      }\n\n      // ignore existing histo in 3d case\n      if (this._3d && histo && !histo.fXaxis.fLabels)\n         histo = null;\n\n      if (!histo) {\n         this.autorange = true;\n\n         if (graphs.arr[0]?.fHistogram?.fXaxis?.fTimeDisplay) {\n            time_display = true;\n            time_format = graphs.arr[0].fHistogram.fXaxis.fTimeFormat;\n         }\n      }\n\n      graphs.arr.forEach(gr => {\n         if (gr.fNpoints === 0) return;\n         if (rw.first) {\n            rw.xmin = rw.xmax = gr.fX[0];\n            rw.ymin = rw.ymax = gr.fY[0];\n            rw.first = false;\n         }\n         for (let i = 0; i < gr.fNpoints; ++i) {\n            rw.xmin = Math.min(rw.xmin, gr.fX[i]);\n            rw.xmax = Math.max(rw.xmax, gr.fX[i]);\n            rw.ymin = Math.min(rw.ymin, gr.fY[i]);\n            rw.ymax = Math.max(rw.ymax, gr.fY[i]);\n         }\n      });\n\n      if (rw.xmin === rw.xmax)\n         rw.xmax += 1;\n      if (rw.ymin === rw.ymax)\n         rw.ymax += 1;\n      const dx = 0.05 * (rw.xmax - rw.xmin),\n            dy = 0.05 * (rw.ymax - rw.ymin);\n      let uxmin = rw.xmin - dx,\n          uxmax = rw.xmax + dx;\n      if (logy) {\n         if (rw.ymin <= 0)\n            rw.ymin = 0.001 * rw.ymax;\n         minimum = rw.ymin / (1 + 0.5 * Math.log10(rw.ymax / rw.ymin));\n         maximum = rw.ymax * (1 + 0.2 * Math.log10(rw.ymax / rw.ymin));\n      } else {\n         minimum = rw.ymin - dy;\n         maximum = rw.ymax + dy;\n      }\n      if (minimum < 0 && rw.ymin >= 0)\n         minimum = 0;\n      if (maximum > 0 && rw.ymax <= 0)\n         maximum = 0;\n\n       const glob_minimum = minimum, glob_maximum = maximum;\n\n      if (uxmin < 0 && rw.xmin >= 0)\n         uxmin = logx ? 0.9 * rw.xmin : 0;\n      if (uxmax > 0 && rw.xmax <= 0)\n         uxmax = logx? 1.1 * rw.xmax : 0;\n\n      if (mgraph.fMinimum !== kNoZoom)\n         rw.ymin = minimum = mgraph.fMinimum;\n      if (mgraph.fMaximum !== kNoZoom)\n         rw.ymax = maximum = mgraph.fMaximum;\n\n      if (minimum < 0 && rw.ymin >= 0 && logy)\n         minimum = 0.9 * rw.ymin;\n      if (maximum > 0 && rw.ymax <= 0 && logy)\n         maximum = 1.1 * rw.ymax;\n      if (minimum <= 0 && logy)\n         minimum = 0.001 * maximum;\n      if (!logy && minimum > 0 && minimum < 0.05*maximum)\n         minimum = 0;\n      if (uxmin <= 0 && logx)\n         uxmin = (uxmax > 1000) ? 1 : 0.001 * uxmax;\n\n      // Create a temporary histogram to draw the axis (if necessary)\n      if (!histo) {\n         let xaxis, yaxis;\n         if (this._3d) {\n            histo = createHistogram(clTH2I, graphs.arr.length, 10);\n            xaxis = histo.fXaxis;\n            xaxis.fXmin = 0;\n            xaxis.fXmax = graphs.arr.length;\n            xaxis.fLabels = create(clTHashList);\n            for (let i = 0; i < graphs.arr.length; i++) {\n               const lbl = create(clTObjString);\n               lbl.fString = graphs.arr[i].fTitle || `gr${i}`;\n               lbl.fUniqueID = graphs.arr.length - i; // graphs drawn in reverse order\n               xaxis.fLabels.Add(lbl, '');\n            }\n            xaxis = histo.fYaxis;\n            yaxis = histo.fZaxis;\n         } else {\n            histo = createHistogram(clTH1I, 10);\n            xaxis = histo.fXaxis;\n            yaxis = histo.fYaxis;\n         }\n         histo.fTitle = mgraph.fTitle;\n         if (histo.fTitle.indexOf(';') >= 0) {\n            const t = histo.fTitle.split(';');\n            histo.fTitle = t[0];\n            if (t[1]) xaxis.fTitle = t[1];\n            if (t[2]) yaxis.fTitle = t[2];\n         }\n\n         xaxis.fXmin = uxmin;\n         xaxis.fXmax = uxmax;\n         xaxis.fTimeDisplay = time_display;\n         if (time_display) xaxis.fTimeFormat = time_format;\n      }\n\n      const axis = this._3d ? histo.fZaxis : histo.fYaxis;\n      axis.fXmin = Math.min(minimum, glob_minimum);\n      axis.fXmax = Math.max(maximum, glob_maximum);\n      histo.fMinimum = minimum;\n      histo.fMaximum = maximum;\n      histo.fBits |= kNoStats;\n\n      return histo;\n   }\n\n   /** @summary draw speical histogram for axis\n     * @return {Promise} when ready */\n   async drawAxisHist(histo, hopt) {\n      return TH1Painter.draw(this.getDom(), histo, hopt);\n   }\n\n   /** @summary Draw graph  */\n   async drawGraph(gr, opt /*, pos3d */) {\n      return TGraphPainter.draw(this.getDom(), gr, opt);\n   }\n\n   /** @summary method draws next graph  */\n   async drawNextGraph(indx) {\n      const graphs = this.getObject().fGraphs;\n\n      // at the end of graphs drawing draw functions (if any)\n      if (indx >= graphs.arr.length)\n         return this;\n\n      const gr = graphs.arr[indx],\n            draw_opt = (graphs.opt[indx] || this._restopt) + this._auto;\n\n      // used in automatic colors numbering\n      if (this._auto)\n         gr.$num_graphs = graphs.arr.length;\n\n      return this.drawGraph(gr, draw_opt, graphs.arr.length - indx).then(subp => {\n         if (subp) {\n            subp.setSecondaryId(this, `graphs_${indx}`);\n            this.painters.push(subp);\n         }\n\n         return this.drawNextGraph(indx+1);\n      });\n   }\n\n   /** @summary Draw multigraph object using painter instance\n     * @private */\n   static async _drawMG(painter, opt) {\n      const d = new DrawOptions(opt);\n\n      painter._3d = d.check('3D');\n      painter._auto = ''; // extra options for auto colors\n      ['PFC', 'PLC', 'PMC'].forEach(f => { if (d.check(f)) painter._auto += ' ' + f; });\n\n      let hopt = '';\n      if (d.check('FB') && painter._3d) hopt += 'FB'; // will be directly combined with LEGO\n      PadDrawOptions.forEach(name => { if (d.check(name)) hopt += ';' + name; });\n\n      painter._restopt = d.remain();\n\n      let promise = Promise.resolve(true);\n      if (d.check('A') || !painter.getMainPainter()) {\n          const mgraph = painter.getObject(),\n                histo = painter.scanGraphsRange(mgraph.fGraphs, mgraph.fHistogram, painter.getPadPainter()?.getRootPad(true));\n\n         promise = painter.drawAxisHist(histo, hopt).then(ap => {\n            ap.setSecondaryId(painter, 'hist'); // mark that axis painter generated from mg\n            painter.firstpainter = ap;\n         });\n      }\n\n      return promise.then(() => {\n         painter.addToPadPrimitives();\n         return painter.drawNextGraph(0);\n      }).then(() => {\n         const handler = new FunctionsHandler(painter, painter.getPadPainter(), painter.getObject().fFunctions, true);\n         return handler.drawNext(0); // returns painter\n      });\n   }\n\n   /** @summary Draw TMultiGraph object */\n   static async draw(dom, mgraph, opt) {\n      return TMultiGraphPainter._drawMG(new TMultiGraphPainter(dom, mgraph), opt);\n   }\n\n} // class TMultiGraphPainter\n\nexport { TMultiGraphPainter };\n","import { TMultiGraphPainter as TMultiGraphPainter2D } from '../hist2d/TMultiGraphPainter.mjs';\nimport { TH1Painter } from '../hist2d/TH1Painter.mjs';\nimport { TH2Painter } from './TH2Painter.mjs';\nimport { TGraphPainter } from './TGraphPainter.mjs';\n\n\nclass TMultiGraphPainter extends TMultiGraphPainter2D {\n\n   /** @summary draw speical histogram for axis\n     * @return {Promise} when ready */\n   async drawAxisHist(histo, hopt) {\n      return this._3d\n              ? TH2Painter.draw(this.getDom(), histo, 'LEGO' + hopt)\n              : TH1Painter.draw(this.getDom(), histo, hopt);\n   }\n\n   /** @summary draw multigraph in 3D */\n   async drawGraph(gr, opt, pos3d) {\n      if (this._3d) opt += 'pos3d_'+pos3d;\n      return TGraphPainter.draw(this.getDom(), gr, opt);\n   }\n\n   /** @summary Draw TMultiGraph object */\n   static async draw(dom, mgraph, opt) {\n      return TMultiGraphPainter._drawMG(new TMultiGraphPainter(dom, mgraph), opt);\n   }\n\n} // class TMultiGraphPainter\n\nexport { TMultiGraphPainter };\n"],"names":["TGraphPainter","TGraphPainter2D","drawBins3D","fp","graph","mode3d","grx","gry","grz","toplevel","console","log","zoom_xmin","zoom_xmax","this","options","pos3d","createGraphDrawAttributes","drawbins","optimizeBins","first","last","length","zoom_ymin","zoom_ymax","x","pnts","p0","n","p1","push","y","lines","createLineSegments","create3DLineMaterial","add3DMesh","render3D","drawAxisHisto","TH1Painter","draw","getDom","createHistogram","Axis","dom","opt","_drawGraph","TMultiGraphPainter","ObjectPainter","constructor","mgraph","super","firstpainter","autorange","painters","cleanup","updateObject","obj","matchObjectType","getObject","graphs","fGraphs","pp","getPadPainter","fTitle","isany","histo","fHistogram","scanGraphsRange","ngr","Math","min","arr","i","_restopt","_auto","_funcHandler","FunctionsHandler","fFunctions","redraw","reason","promise","Promise","resolve","redrawNext","async","indx","then","res","drawNext","pad","rw","xmin","xmax","ymin","ymax","maximum","minimum","logx","logy","time_display","time_format","fLogx","fLogv","fLogy","fUxmin","fUxmax","fUymin","fUymax","_3d","fXaxis","fLabels","fTimeDisplay","fTimeFormat","forEach","gr","fNpoints","fX","fY","max","dx","dy","uxmin","uxmax","log10","glob_minimum","glob_maximum","fMinimum","kNoZoom","fMaximum","xaxis","yaxis","clTH2I","fXmin","fXmax","create","clTHashList","lbl","clTObjString","fString","fUniqueID","Add","fYaxis","fZaxis","clTH1I","indexOf","t","split","axis","fBits","kNoStats","drawAxisHist","hopt","drawGraph","drawNextGraph","draw_opt","$num_graphs","subp","setSecondaryId","_drawMG","painter","d","DrawOptions","check","f","PadDrawOptions","name","remain","getMainPainter","getRootPad","ap","addToPadPrimitives","TMultiGraphPainter2D","TH2Painter"],"sourceRoot":""}
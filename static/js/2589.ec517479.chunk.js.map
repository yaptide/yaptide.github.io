{"version":3,"file":"static/js/2589.ec517479.chunk.js","mappings":"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","sources":["../node_modules/jsroot/modules/draw/TLinePainter.mjs","../node_modules/jsroot/modules/draw/TRatioPlotPainter.mjs"],"sourcesContent":["import { BIT } from '../core.mjs';\nimport { ObjectPainter } from '../base/ObjectPainter.mjs';\nimport { ensureTCanvas } from '../gpad/TCanvasPainter.mjs';\nimport { addMoveHandler } from '../gui/utils.mjs';\nimport { assignContextMenu, kToFront } from '../gui/menu.mjs';\n\n\nconst kLineNDC = BIT(14);\n\nclass TLinePainter extends ObjectPainter {\n\n   /** @summary Start interactive moving */\n   moveStart(x, y) {\n      const fullsize = Math.sqrt((this.x1-this.x2)**2 + (this.y1-this.y2)**2),\n          sz1 = Math.sqrt((x-this.x1)**2 + (y-this.y1)**2)/fullsize,\n          sz2 = Math.sqrt((x-this.x2)**2 + (y-this.y2)**2)/fullsize;\n      if (sz1 > 0.9)\n         this.side = 1;\n      else if (sz2 > 0.9)\n         this.side = -1;\n      else\n         this.side = 0;\n   }\n\n   /** @summary Continue interactive moving */\n   moveDrag(dx, dy) {\n      if (this.side !== 1) { this.x1 += dx; this.y1 += dy; }\n      if (this.side !== -1) { this.x2 += dx; this.y2 += dy; }\n      this.draw_g.select('path').attr('d', this.createPath());\n   }\n\n   /** @summary Finish interactive moving */\n   moveEnd(not_changed) {\n      if (not_changed) return;\n      const line = this.getObject();\n      let exec = '';\n      line.fX1 = this.svgToAxis('x', this.x1, this.isndc);\n      line.fX2 = this.svgToAxis('x', this.x2, this.isndc);\n      line.fY1 = this.svgToAxis('y', this.y1, this.isndc);\n      line.fY2 = this.svgToAxis('y', this.y2, this.isndc);\n      if (this.side !== 1) exec += `SetX1(${line.fX1});;SetY1(${line.fY1});;`;\n      if (this.side !== -1) exec += `SetX2(${line.fX2});;SetY2(${line.fY2});;`;\n      this.submitCanvExec(exec + 'Notify();;');\n   }\n\n   /** @summary Calculate line coordinates */\n   prepareDraw() {\n      const line = this.getObject();\n\n      this.isndc = line.TestBit(kLineNDC);\n\n      const func = this.getAxisToSvgFunc(this.isndc, true, true);\n\n      this.x1 = func.x(line.fX1);\n      this.y1 = func.y(line.fY1);\n      this.x2 = func.x(line.fX2);\n      this.y2 = func.y(line.fY2);\n\n      this.createAttLine({ attr: line });\n   }\n\n   /** @summary Create path */\n   createPath() {\n      const x1 = Math.round(this.x1), x2 = Math.round(this.x2), y1 = Math.round(this.y1), y2 = Math.round(this.y2);\n      return `M${x1},${y1}` + (x1 === x2 ? `V${y2}` : (y1 === y2 ? `H${x2}` : `L${x2},${y2}`));\n   }\n\n   /** @summary Add extras - used for TArrow */\n   addExtras() {}\n\n   /** @summary Redraw line */\n   redraw() {\n      this.createG();\n\n      this.prepareDraw();\n\n      const elem = this.draw_g.append('svg:path')\n                       .attr('d', this.createPath())\n                       .call(this.lineatt.func);\n\n      if (this.getObject()?.$do_not_draw)\n         elem.remove();\n      else {\n         this.addExtras(elem);\n         addMoveHandler(this);\n         assignContextMenu(this, kToFront);\n      }\n\n      return this;\n   }\n\n   /** @summary Draw TLine object */\n   static async draw(dom, obj, opt) {\n      const painter = new TLinePainter(dom, obj, opt);\n      return ensureTCanvas(painter, false).then(() => painter.redraw());\n   }\n\n} // class TLinePainter\n\n\nexport { TLinePainter };\n","import { create, clTPad, clTLine, isFunc } from '../core.mjs';\nimport { ObjectPainter } from '../base/ObjectPainter.mjs';\nimport { ensureTCanvas } from '../gpad/TCanvasPainter.mjs';\nimport { TLinePainter } from './TLinePainter.mjs';\n\n\n/**\n * @summary Painter class for TRatioPlot\n *\n * @private\n */\n\nclass TRatioPlotPainter extends ObjectPainter {\n\n   /** @summary Set grids range */\n   setGridsRange(xmin, xmax, ymin, ymax, low_p) {\n      const ratio = this.getObject();\n      if (xmin === xmax) {\n         const x_handle = this.getPadPainter()?.findPainterFor(ratio.fLowerPad, 'lower_pad', clTPad)?.getFramePainter()?.x_handle;\n         if (!x_handle) return;\n         if (xmin === 0) {\n            // in case of unzoom full range should be used\n            xmin = x_handle.full_min;\n            xmax = x_handle.full_max;\n         } else {\n            // in case of y-scale zooming actual range has to be used\n            xmin = x_handle.scale_min;\n            xmax = x_handle.scale_max;\n         }\n      }\n      ratio.fGridlines.forEach(line => {\n         line.fX1 = xmin;\n         line.fX2 = xmax;\n      });\n      const nlines = Math.min(ratio.fGridlines.length, ratio.fGridlinePositions.length);\n      for (let i = 0; i < nlines; ++i) {\n         const y = ratio.fGridlinePositions[i],\n               line = ratio.fGridlines[i];\n         if (ymin !== 'ignorey') {\n            line.$do_not_draw = (ymin !== ymax) && ((y < ymin) || (y > ymax));\n            line.fY1 = line.fY2 = y;\n         }\n         low_p?.findPainterFor(line)?.redraw();\n      }\n   }\n\n   /** @summary Configure custom interactive handlers for ratio plot\n    * @desc Should work for both new and old code */\n   configureInteractive() {\n      const ratio = this.getObject(),\n            pp = this.getPadPainter(),\n            up_p = pp.findPainterFor(ratio.fUpperPad, 'upper_pad', clTPad),\n            up_fp = up_p?.getFramePainter(),\n            low_p = pp.findPainterFor(ratio.fLowerPad, 'lower_pad', clTPad),\n            low_fp = low_p?.getFramePainter();\n\n      if (!up_p || !low_p)\n         return;\n\n      low_p.forEachPainterInPad(objp => {\n         if (isFunc(objp?.testEditable))\n            objp.testEditable(false);\n      });\n\n      this.setGridsRange(low_fp.scale_xmin, low_fp.scale_xmax, low_fp.scale_ymin, low_fp.scale_ymax, low_p);\n\n      if (up_p._ratio_interactive && low_p._ratio_interactive)\n         return;\n\n      up_p._ratio_interactive = true;\n      low_p._ratio_interactive = true;\n\n      up_fp.o_zoom = up_fp.zoom;\n      up_fp._ratio_low_fp = low_fp;\n      up_fp._ratio_painter = this;\n\n      up_fp.zoom = function(xmin, xmax, ymin, ymax, zmin, zmax) {\n         return this.o_zoom(xmin, xmax, ymin, ymax, zmin, zmax).then(res => {\n            this._ratio_painter.setGridsRange(up_fp.scale_xmin, up_fp.scale_xmax, 'ignory');\n            return this._ratio_low_fp.o_zoom(up_fp.scale_xmin, up_fp.scale_xmax).then(() => res);\n         });\n      };\n\n      up_fp.o_sizeChanged = up_fp.sizeChanged;\n      up_fp.sizeChanged = function() {\n         this.o_sizeChanged();\n         this._ratio_low_fp.fX1NDC = this.fX1NDC;\n         this._ratio_low_fp.fX2NDC = this.fX2NDC;\n         this._ratio_low_fp.o_sizeChanged();\n      };\n\n      low_fp.o_zoom = low_fp.zoom;\n      low_fp._ratio_up_fp = up_fp;\n      low_fp._ratio_painter = this;\n\n      low_fp.zoom = function(xmin, xmax, ymin, ymax, zmin, zmax) {\n         if (xmin === xmax) {\n            xmin = up_fp.xmin;\n            xmax = up_fp.xmax;\n         } else {\n            if (xmin < up_fp.xmin) xmin = up_fp.xmin;\n            if (xmax > up_fp.xmax) xmax = up_fp.xmax;\n         }\n         this._ratio_painter.setGridsRange(xmin, xmax, ymin, ymax);\n         return this._ratio_up_fp.o_zoom(xmin, xmax).then(() => this.o_zoom(xmin, xmax, ymin, ymax, zmin, zmax));\n      };\n\n      low_fp.o_sizeChanged = low_fp.sizeChanged;\n      low_fp.sizeChanged = function() {\n         this.o_sizeChanged();\n         this._ratio_up_fp.fX1NDC = this.fX1NDC;\n         this._ratio_up_fp.fX2NDC = this.fX2NDC;\n         this._ratio_up_fp.o_sizeChanged();\n      };\n   }\n\n   /** @summary Redraw old TRatioPlot where object was in very end of list of primitives */\n   async redrawOld() {\n      const ratio = this.getObject(),\n            pp = this.getPadPainter(),\n            top_p = pp.findPainterFor(ratio.fTopPad, 'top_pad', clTPad),\n            pad = pp.getRootPad(),\n            mirrow_axis = (pad.fFrameFillStyle === 0) ? 1 : 0,\n            tick_x = pad.fTickx || mirrow_axis,\n            tick_y = pad.fTicky || mirrow_axis;\n\n      top_p?.disablePadDrawing();\n\n      const up_p = pp.findPainterFor(ratio.fUpperPad, 'upper_pad', clTPad),\n            up_main = up_p?.getMainPainter(),\n            up_fp = up_p?.getFramePainter(),\n            low_p = pp.findPainterFor(ratio.fLowerPad, 'lower_pad', clTPad),\n            low_main = low_p?.getMainPainter(),\n            low_fp = low_p?.getFramePainter();\n      let promise_up = Promise.resolve(true);\n\n      if (up_p && up_main && up_fp && low_fp && !up_p._ratio_configured) {\n         up_p._ratio_configured = true;\n\n         up_main.options.Axis = 0; // draw both axes\n\n         const h = up_main.getHisto();\n\n         h.fYaxis.$use_top_pad = true; // workaround to use same scaling\n         h.fXaxis.fLabelSize = 0; // do not draw X axis labels\n         h.fXaxis.fTitle = ''; // do not draw X axis title\n\n         up_p.getRootPad().fTickx = tick_x;\n         up_p.getRootPad().fTicky = tick_y;\n\n         promise_up = up_p.redrawPad();\n      }\n\n      return promise_up.then(() => {\n         if (!low_p || !low_main || !low_fp || !up_fp || low_p._ratio_configured)\n            return this;\n\n         low_p._ratio_configured = true;\n         low_main.options.Axis = 0; // draw both axes\n         const h = low_main.getHisto();\n         h.fXaxis.fTitle = 'x';\n\n         h.fXaxis.$use_top_pad = true;\n         h.fYaxis.$use_top_pad = true;\n         low_p.getRootPad().fTickx = tick_x;\n         low_p.getRootPad().fTicky = tick_y;\n\n         const arr = [];\n         let currpad;\n\n         // add missing lines in old ratio painter\n         if ((ratio.fGridlinePositions.length > 0) && (ratio.fGridlines.length < ratio.fGridlinePositions.length)) {\n            ratio.fGridlinePositions.forEach(gridy => {\n               let found = false;\n               ratio.fGridlines.forEach(line => {\n                  if ((line.fY1 === line.fY2) && (Math.abs(line.fY1 - gridy) < 1e-6)) found = true;\n               });\n               if (!found) {\n                  const line = create(clTLine);\n                  line.fX1 = up_fp.scale_xmin;\n                  line.fX2 = up_fp.scale_xmax;\n                  line.fY1 = line.fY2 = gridy;\n                  line.fLineStyle = 2;\n                  ratio.fGridlines.push(line);\n                  if (currpad === undefined)\n                     currpad = this.selectCurrentPad(ratio.fLowerPad.fName);\n                  arr.push(TLinePainter.draw(this.getDom(), line));\n               }\n            });\n         }\n\n         return Promise.all(arr).then(() => {\n            if (currpad !== undefined)\n               this.selectCurrentPad(currpad);\n            return low_fp.zoom(up_fp.scale_xmin, up_fp.scale_xmax);\n         });\n      });\n   }\n\n   /** @summary Redraw TRatioPlot */\n   async redraw() {\n      const ratio = this.getObject(),\n            pp = this.getPadPainter();\n\n      if (this.$oldratio === undefined)\n         this.$oldratio = !!pp.findPainterFor(ratio.fTopPad, 'top_pad', clTPad);\n\n      // configure ratio interactive at the end\n      pp.$userInteractive = () => this.configureInteractive();\n\n      if (this.$oldratio)\n         return this.redrawOld();\n\n      const pad = pp.getRootPad(),\n            mirrow_axis = (pad.fFrameFillStyle === 0) ? 1 : 0,\n            tick_x = pad.fTickx || mirrow_axis,\n            tick_y = pad.fTicky || mirrow_axis;\n\n      // do not draw primitives and pad itself\n      ratio.fTopPad.$disable_drawing = true;\n\n      ratio.fUpperPad.$ratio_pad = 'up'; // indicate drawing of the axes for main painter\n      ratio.fUpperPad.fTickx = tick_x;\n      ratio.fUpperPad.fTicky = tick_y;\n\n      ratio.fLowerPad.$ratio_pad = 'low'; // indicate drawing of the axes for main painter\n      ratio.fLowerPad.fTickx = tick_x;\n      ratio.fLowerPad.fTicky = tick_y;\n\n      return this;\n   }\n\n   /** @summary Draw TRatioPlot */\n   static async draw(dom, ratio, opt) {\n      const painter = new TRatioPlotPainter(dom, ratio, opt);\n\n      return ensureTCanvas(painter, false).then(() => painter.redraw());\n   }\n\n} // class TRatioPlotPainter\n\nexport { TRatioPlotPainter };\n"],"names":["kLineNDC","BIT","TLinePainter","ObjectPainter","moveStart","x","y","fullsize","Math","sqrt","this","x1","x2","y1","y2","sz1","sz2","side","moveDrag","dx","dy","draw_g","select","attr","createPath","moveEnd","not_changed","line","getObject","exec","fX1","svgToAxis","isndc","fX2","fY1","fY2","submitCanvExec","prepareDraw","TestBit","func","getAxisToSvgFunc","createAttLine","round","addExtras","redraw","createG","elem","append","call","lineatt","$do_not_draw","remove","addMoveHandler","assignContextMenu","kToFront","draw","dom","obj","opt","painter","ensureTCanvas","then","TRatioPlotPainter","setGridsRange","xmin","xmax","ymin","ymax","low_p","ratio","x_handle","getPadPainter","findPainterFor","fLowerPad","clTPad","getFramePainter","full_min","full_max","scale_min","scale_max","fGridlines","forEach","nlines","min","length","fGridlinePositions","i","configureInteractive","pp","up_p","fUpperPad","up_fp","low_fp","forEachPainterInPad","objp","isFunc","testEditable","scale_xmin","scale_xmax","scale_ymin","scale_ymax","_ratio_interactive","o_zoom","zoom","_ratio_low_fp","_ratio_painter","zmin","zmax","res","o_sizeChanged","sizeChanged","fX1NDC","fX2NDC","_ratio_up_fp","redrawOld","top_p","fTopPad","pad","getRootPad","mirrow_axis","fFrameFillStyle","tick_x","fTickx","tick_y","fTicky","disablePadDrawing","up_main","getMainPainter","low_main","promise_up","Promise","resolve","_ratio_configured","options","Axis","h","getHisto","fYaxis","$use_top_pad","fXaxis","fLabelSize","fTitle","redrawPad","arr","currpad","gridy","found","abs","create","clTLine","fLineStyle","push","undefined","selectCurrentPad","fName","getDom","all","$oldratio","$userInteractive","$disable_drawing","$ratio_pad"],"sourceRoot":""}